
ECU3Smart_CAR_Parking.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001908  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000114  08001a38  08001a38  00011a38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001b4c  08001b4c  0002002c  2**0
                  CONTENTS
  4 .ARM          00000000  08001b4c  08001b4c  0002002c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001b4c  08001b4c  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001b4c  08001b4c  00011b4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001b50  08001b50  00011b50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  08001b54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000009c  2000002c  08001b80  0002002c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c8  08001b80  000200c8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000748e  00000000  00000000  00020055  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000011ed  00000000  00000000  000274e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000012ec  00000000  00000000  000286d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000318  00000000  00000000  000299c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000280  00000000  00000000  00029cd8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00003081  00000000  00000000  00029f58  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00003bdd  00000000  00000000  0002cfd9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0000baf2  00000000  00000000  00030bb6  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0003c6a8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000009d0  00000000  00000000  0003c724  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	2000002c 	.word	0x2000002c
 800014c:	00000000 	.word	0x00000000
 8000150:	08001a20 	.word	0x08001a20

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000030 	.word	0x20000030
 800016c:	08001a20 	.word	0x08001a20

08000170 <keypad_Init>:


#include "Keypad.h"

void keypad_Init(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b082      	sub	sp, #8
 8000174:	af00      	add	r7, sp, #0

	GPIO_Pin_Configure_t PinCinfg;

	PinCinfg.GPIO_Pin_Number=GPIO_PIN_0;
 8000176:	2301      	movs	r3, #1
 8000178:	80bb      	strh	r3, [r7, #4]
	PinCinfg.GPIO_MODE = GPIO_MODE_INPUT_PU;
 800017a:	2302      	movs	r3, #2
 800017c:	71bb      	strb	r3, [r7, #6]
	MCAL_GPIO_Init(GPIOB, &PinCinfg);
 800017e:	1d3b      	adds	r3, r7, #4
 8000180:	4619      	mov	r1, r3
 8000182:	4821      	ldr	r0, [pc, #132]	; (8000208 <keypad_Init+0x98>)
 8000184:	f000 febd 	bl	8000f02 <MCAL_GPIO_Init>

	PinCinfg.GPIO_Pin_Number=GPIO_PIN_1;
 8000188:	2302      	movs	r3, #2
 800018a:	80bb      	strh	r3, [r7, #4]
	PinCinfg.GPIO_MODE = GPIO_MODE_INPUT_PU;
 800018c:	2302      	movs	r3, #2
 800018e:	71bb      	strb	r3, [r7, #6]
	MCAL_GPIO_Init(GPIOB, &PinCinfg);
 8000190:	1d3b      	adds	r3, r7, #4
 8000192:	4619      	mov	r1, r3
 8000194:	481c      	ldr	r0, [pc, #112]	; (8000208 <keypad_Init+0x98>)
 8000196:	f000 feb4 	bl	8000f02 <MCAL_GPIO_Init>

	PinCinfg.GPIO_Pin_Number=GPIO_PIN_3;
 800019a:	2308      	movs	r3, #8
 800019c:	80bb      	strh	r3, [r7, #4]
	PinCinfg.GPIO_MODE = GPIO_MODE_INPUT_PU;
 800019e:	2302      	movs	r3, #2
 80001a0:	71bb      	strb	r3, [r7, #6]
	MCAL_GPIO_Init(GPIOB, &PinCinfg);
 80001a2:	1d3b      	adds	r3, r7, #4
 80001a4:	4619      	mov	r1, r3
 80001a6:	4818      	ldr	r0, [pc, #96]	; (8000208 <keypad_Init+0x98>)
 80001a8:	f000 feab 	bl	8000f02 <MCAL_GPIO_Init>

	PinCinfg.GPIO_Pin_Number=GPIO_PIN_4;
 80001ac:	2310      	movs	r3, #16
 80001ae:	80bb      	strh	r3, [r7, #4]
	PinCinfg.GPIO_MODE = GPIO_MODE_INPUT_PU;
 80001b0:	2302      	movs	r3, #2
 80001b2:	71bb      	strb	r3, [r7, #6]
	MCAL_GPIO_Init(GPIOB, &PinCinfg);
 80001b4:	1d3b      	adds	r3, r7, #4
 80001b6:	4619      	mov	r1, r3
 80001b8:	4813      	ldr	r0, [pc, #76]	; (8000208 <keypad_Init+0x98>)
 80001ba:	f000 fea2 	bl	8000f02 <MCAL_GPIO_Init>

	PinCinfg.GPIO_Pin_Number=GPIO_PIN_5;
 80001be:	2320      	movs	r3, #32
 80001c0:	80bb      	strh	r3, [r7, #4]
	PinCinfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80001c2:	2304      	movs	r3, #4
 80001c4:	71bb      	strb	r3, [r7, #6]
	PinCinfg.GPIO_OUTPUT_SPEED =GPIO_SPEED_10M;
 80001c6:	2301      	movs	r3, #1
 80001c8:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB, &PinCinfg);
 80001ca:	1d3b      	adds	r3, r7, #4
 80001cc:	4619      	mov	r1, r3
 80001ce:	480e      	ldr	r0, [pc, #56]	; (8000208 <keypad_Init+0x98>)
 80001d0:	f000 fe97 	bl	8000f02 <MCAL_GPIO_Init>

	PinCinfg.GPIO_Pin_Number=GPIO_PIN_6;
 80001d4:	2340      	movs	r3, #64	; 0x40
 80001d6:	80bb      	strh	r3, [r7, #4]
	PinCinfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80001d8:	2304      	movs	r3, #4
 80001da:	71bb      	strb	r3, [r7, #6]
	PinCinfg.GPIO_OUTPUT_SPEED =GPIO_SPEED_10M;
 80001dc:	2301      	movs	r3, #1
 80001de:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB, &PinCinfg);
 80001e0:	1d3b      	adds	r3, r7, #4
 80001e2:	4619      	mov	r1, r3
 80001e4:	4808      	ldr	r0, [pc, #32]	; (8000208 <keypad_Init+0x98>)
 80001e6:	f000 fe8c 	bl	8000f02 <MCAL_GPIO_Init>

	PinCinfg.GPIO_Pin_Number=GPIO_PIN_7;
 80001ea:	2380      	movs	r3, #128	; 0x80
 80001ec:	80bb      	strh	r3, [r7, #4]
	PinCinfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80001ee:	2304      	movs	r3, #4
 80001f0:	71bb      	strb	r3, [r7, #6]
	PinCinfg.GPIO_OUTPUT_SPEED =GPIO_SPEED_10M;
 80001f2:	2301      	movs	r3, #1
 80001f4:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB, &PinCinfg);
 80001f6:	1d3b      	adds	r3, r7, #4
 80001f8:	4619      	mov	r1, r3
 80001fa:	4803      	ldr	r0, [pc, #12]	; (8000208 <keypad_Init+0x98>)
 80001fc:	f000 fe81 	bl	8000f02 <MCAL_GPIO_Init>

}
 8000200:	bf00      	nop
 8000202:	3708      	adds	r7, #8
 8000204:	46bd      	mov	sp, r7
 8000206:	bd80      	pop	{r7, pc}
 8000208:	40010c00 	.word	0x40010c00

0800020c <keypad_Read>:

char keypad_Read(void)
{
 800020c:	b580      	push	{r7, lr}
 800020e:	af00      	add	r7, sp, #0
	MCAL_GPIO_WritePort(GPIOB, 0x0020);// Make Pin B5 High
 8000210:	2120      	movs	r1, #32
 8000212:	4843      	ldr	r0, [pc, #268]	; (8000320 <keypad_Read+0x114>)
 8000214:	f000 ff36 	bl	8001084 <MCAL_GPIO_WritePort>
	if(  (MCAL_GPIO_ReadPort(GPIOB)) &(uint16_t)(1<<0) ) return '*';
 8000218:	4841      	ldr	r0, [pc, #260]	; (8000320 <keypad_Read+0x114>)
 800021a:	f000 ff06 	bl	800102a <MCAL_GPIO_ReadPort>
 800021e:	4603      	mov	r3, r0
 8000220:	f003 0301 	and.w	r3, r3, #1
 8000224:	2b00      	cmp	r3, #0
 8000226:	d001      	beq.n	800022c <keypad_Read+0x20>
 8000228:	232a      	movs	r3, #42	; 0x2a
 800022a:	e076      	b.n	800031a <keypad_Read+0x10e>
	if(  (MCAL_GPIO_ReadPort(GPIOB)) &(uint16_t)(1<<1) ) return '7';
 800022c:	483c      	ldr	r0, [pc, #240]	; (8000320 <keypad_Read+0x114>)
 800022e:	f000 fefc 	bl	800102a <MCAL_GPIO_ReadPort>
 8000232:	4603      	mov	r3, r0
 8000234:	f003 0302 	and.w	r3, r3, #2
 8000238:	2b00      	cmp	r3, #0
 800023a:	d001      	beq.n	8000240 <keypad_Read+0x34>
 800023c:	2337      	movs	r3, #55	; 0x37
 800023e:	e06c      	b.n	800031a <keypad_Read+0x10e>
	if(  (MCAL_GPIO_ReadPort(GPIOB)) &(uint16_t)(1<<3) ) return '4';
 8000240:	4837      	ldr	r0, [pc, #220]	; (8000320 <keypad_Read+0x114>)
 8000242:	f000 fef2 	bl	800102a <MCAL_GPIO_ReadPort>
 8000246:	4603      	mov	r3, r0
 8000248:	f003 0308 	and.w	r3, r3, #8
 800024c:	2b00      	cmp	r3, #0
 800024e:	d001      	beq.n	8000254 <keypad_Read+0x48>
 8000250:	2334      	movs	r3, #52	; 0x34
 8000252:	e062      	b.n	800031a <keypad_Read+0x10e>
	if(  (MCAL_GPIO_ReadPort(GPIOB)) &(uint16_t)(1<<4) ) return '1';
 8000254:	4832      	ldr	r0, [pc, #200]	; (8000320 <keypad_Read+0x114>)
 8000256:	f000 fee8 	bl	800102a <MCAL_GPIO_ReadPort>
 800025a:	4603      	mov	r3, r0
 800025c:	f003 0310 	and.w	r3, r3, #16
 8000260:	2b00      	cmp	r3, #0
 8000262:	d001      	beq.n	8000268 <keypad_Read+0x5c>
 8000264:	2331      	movs	r3, #49	; 0x31
 8000266:	e058      	b.n	800031a <keypad_Read+0x10e>


	MCAL_GPIO_WritePort(GPIOB, 0x0040); // Make Pin B6 High
 8000268:	2140      	movs	r1, #64	; 0x40
 800026a:	482d      	ldr	r0, [pc, #180]	; (8000320 <keypad_Read+0x114>)
 800026c:	f000 ff0a 	bl	8001084 <MCAL_GPIO_WritePort>
	if(  (MCAL_GPIO_ReadPort(GPIOB)) &(uint16_t)(1<<0) ) return '0';
 8000270:	482b      	ldr	r0, [pc, #172]	; (8000320 <keypad_Read+0x114>)
 8000272:	f000 feda 	bl	800102a <MCAL_GPIO_ReadPort>
 8000276:	4603      	mov	r3, r0
 8000278:	f003 0301 	and.w	r3, r3, #1
 800027c:	2b00      	cmp	r3, #0
 800027e:	d001      	beq.n	8000284 <keypad_Read+0x78>
 8000280:	2330      	movs	r3, #48	; 0x30
 8000282:	e04a      	b.n	800031a <keypad_Read+0x10e>
	if(  (MCAL_GPIO_ReadPort(GPIOB)) &(uint16_t)(1<<1) ) return '8';
 8000284:	4826      	ldr	r0, [pc, #152]	; (8000320 <keypad_Read+0x114>)
 8000286:	f000 fed0 	bl	800102a <MCAL_GPIO_ReadPort>
 800028a:	4603      	mov	r3, r0
 800028c:	f003 0302 	and.w	r3, r3, #2
 8000290:	2b00      	cmp	r3, #0
 8000292:	d001      	beq.n	8000298 <keypad_Read+0x8c>
 8000294:	2338      	movs	r3, #56	; 0x38
 8000296:	e040      	b.n	800031a <keypad_Read+0x10e>
	if(  (MCAL_GPIO_ReadPort(GPIOB)) &(uint16_t)(1<<3) ) return '5';
 8000298:	4821      	ldr	r0, [pc, #132]	; (8000320 <keypad_Read+0x114>)
 800029a:	f000 fec6 	bl	800102a <MCAL_GPIO_ReadPort>
 800029e:	4603      	mov	r3, r0
 80002a0:	f003 0308 	and.w	r3, r3, #8
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	d001      	beq.n	80002ac <keypad_Read+0xa0>
 80002a8:	2335      	movs	r3, #53	; 0x35
 80002aa:	e036      	b.n	800031a <keypad_Read+0x10e>
	if(  (MCAL_GPIO_ReadPort(GPIOB)) &(uint16_t)(1<<4) ) return '2';
 80002ac:	481c      	ldr	r0, [pc, #112]	; (8000320 <keypad_Read+0x114>)
 80002ae:	f000 febc 	bl	800102a <MCAL_GPIO_ReadPort>
 80002b2:	4603      	mov	r3, r0
 80002b4:	f003 0310 	and.w	r3, r3, #16
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d001      	beq.n	80002c0 <keypad_Read+0xb4>
 80002bc:	2332      	movs	r3, #50	; 0x32
 80002be:	e02c      	b.n	800031a <keypad_Read+0x10e>

	MCAL_GPIO_WritePort(GPIOB, 0x0080); // Make Pin B7 High
 80002c0:	2180      	movs	r1, #128	; 0x80
 80002c2:	4817      	ldr	r0, [pc, #92]	; (8000320 <keypad_Read+0x114>)
 80002c4:	f000 fede 	bl	8001084 <MCAL_GPIO_WritePort>
	if(  (MCAL_GPIO_ReadPort(GPIOB)) &(uint16_t)(1<<0) ) return '#';
 80002c8:	4815      	ldr	r0, [pc, #84]	; (8000320 <keypad_Read+0x114>)
 80002ca:	f000 feae 	bl	800102a <MCAL_GPIO_ReadPort>
 80002ce:	4603      	mov	r3, r0
 80002d0:	f003 0301 	and.w	r3, r3, #1
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	d001      	beq.n	80002dc <keypad_Read+0xd0>
 80002d8:	2323      	movs	r3, #35	; 0x23
 80002da:	e01e      	b.n	800031a <keypad_Read+0x10e>
	if(  (MCAL_GPIO_ReadPort(GPIOB)) &(uint16_t)(1<<1) ) return '9';
 80002dc:	4810      	ldr	r0, [pc, #64]	; (8000320 <keypad_Read+0x114>)
 80002de:	f000 fea4 	bl	800102a <MCAL_GPIO_ReadPort>
 80002e2:	4603      	mov	r3, r0
 80002e4:	f003 0302 	and.w	r3, r3, #2
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d001      	beq.n	80002f0 <keypad_Read+0xe4>
 80002ec:	2339      	movs	r3, #57	; 0x39
 80002ee:	e014      	b.n	800031a <keypad_Read+0x10e>
	if(  (MCAL_GPIO_ReadPort(GPIOB)) &(uint16_t)(1<<3) ) return '6';
 80002f0:	480b      	ldr	r0, [pc, #44]	; (8000320 <keypad_Read+0x114>)
 80002f2:	f000 fe9a 	bl	800102a <MCAL_GPIO_ReadPort>
 80002f6:	4603      	mov	r3, r0
 80002f8:	f003 0308 	and.w	r3, r3, #8
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d001      	beq.n	8000304 <keypad_Read+0xf8>
 8000300:	2336      	movs	r3, #54	; 0x36
 8000302:	e00a      	b.n	800031a <keypad_Read+0x10e>
	if(  (MCAL_GPIO_ReadPort(GPIOB)) &(uint16_t)(1<<4) ) return '3';
 8000304:	4806      	ldr	r0, [pc, #24]	; (8000320 <keypad_Read+0x114>)
 8000306:	f000 fe90 	bl	800102a <MCAL_GPIO_ReadPort>
 800030a:	4603      	mov	r3, r0
 800030c:	f003 0310 	and.w	r3, r3, #16
 8000310:	2b00      	cmp	r3, #0
 8000312:	d001      	beq.n	8000318 <keypad_Read+0x10c>
 8000314:	2333      	movs	r3, #51	; 0x33
 8000316:	e000      	b.n	800031a <keypad_Read+0x10e>


	return 'N';
 8000318:	234e      	movs	r3, #78	; 0x4e
}
 800031a:	4618      	mov	r0, r3
 800031c:	bd80      	pop	{r7, pc}
 800031e:	bf00      	nop
 8000320:	40010c00 	.word	0x40010c00

08000324 <LCD_delay>:
#define FUNCTION_SET			0x20
#define SET_CG_ADDRESS			0x40
#define SET_DD_ADDRESS			0x80


static void LCD_delay(int ms){
 8000324:	b480      	push	{r7}
 8000326:	b085      	sub	sp, #20
 8000328:	af00      	add	r7, sp, #0
 800032a:	6078      	str	r0, [r7, #4]
	volatile uint32_t counter =0;
 800032c:	2300      	movs	r3, #0
 800032e:	60bb      	str	r3, [r7, #8]
	for(int i =0;i<ms;i++){
 8000330:	2300      	movs	r3, #0
 8000332:	60fb      	str	r3, [r7, #12]
 8000334:	e00a      	b.n	800034c <LCD_delay+0x28>
		for(;counter<1500;counter++);
 8000336:	68bb      	ldr	r3, [r7, #8]
 8000338:	3301      	adds	r3, #1
 800033a:	60bb      	str	r3, [r7, #8]
 800033c:	68bb      	ldr	r3, [r7, #8]
 800033e:	f240 52db 	movw	r2, #1499	; 0x5db
 8000342:	4293      	cmp	r3, r2
 8000344:	d9f7      	bls.n	8000336 <LCD_delay+0x12>
	for(int i =0;i<ms;i++){
 8000346:	68fb      	ldr	r3, [r7, #12]
 8000348:	3301      	adds	r3, #1
 800034a:	60fb      	str	r3, [r7, #12]
 800034c:	68fa      	ldr	r2, [r7, #12]
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	429a      	cmp	r2, r3
 8000352:	dbf3      	blt.n	800033c <LCD_delay+0x18>
	}
}
 8000354:	bf00      	nop
 8000356:	3714      	adds	r7, #20
 8000358:	46bd      	mov	sp, r7
 800035a:	bc80      	pop	{r7}
 800035c:	4770      	bx	lr

0800035e <LCD_kick>:
//void MCAL_GPIO_WritePin(GPIO_TypeDef * GPIOx,uint16_t PinNumber,uint8_t Vlaue);

void LCD_kick(s_LCD_Config_t  * LCD){
 800035e:	b580      	push	{r7, lr}
 8000360:	b082      	sub	sp, #8
 8000362:	af00      	add	r7, sp, #0
 8000364:	6078      	str	r0, [r7, #4]
	//BITSET(*(LCD->s_LCDCtrlPins.p_PortReg),LCD->s_LCDCtrlPins.enpin);									//enable pulse
	MCAL_GPIO_WritePin(LCD->s_LCDCtrlPins.GPIOX,LCD->s_LCDCtrlPins.enpin,GPIO_PIN_TRUE);
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	6818      	ldr	r0, [r3, #0]
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	88db      	ldrh	r3, [r3, #6]
 800036e:	2201      	movs	r2, #1
 8000370:	4619      	mov	r1, r3
 8000372:	f000 fe69 	bl	8001048 <MCAL_GPIO_WritePin>
	LCD_delay(1);
 8000376:	2001      	movs	r0, #1
 8000378:	f7ff ffd4 	bl	8000324 <LCD_delay>
	MCAL_GPIO_WritePin(LCD->s_LCDCtrlPins.GPIOX,LCD->s_LCDCtrlPins.enpin,GPIO_PIN_FALSE);
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	6818      	ldr	r0, [r3, #0]
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	88db      	ldrh	r3, [r3, #6]
 8000384:	2200      	movs	r2, #0
 8000386:	4619      	mov	r1, r3
 8000388:	f000 fe5e 	bl	8001048 <MCAL_GPIO_WritePin>
}
 800038c:	bf00      	nop
 800038e:	3708      	adds	r7, #8
 8000390:	46bd      	mov	sp, r7
 8000392:	bd80      	pop	{r7, pc}

08000394 <LCD_init>:

void LCD_init(s_LCD_Config_t  *  LCD ){
 8000394:	b580      	push	{r7, lr}
 8000396:	b084      	sub	sp, #16
 8000398:	af00      	add	r7, sp, #0
 800039a:	6078      	str	r0, [r7, #4]
	//*(LCD->s_LCDCtrlPins.p_DataDireReg) |= (1<<LCD->s_LCDCtrlPins.enpin) | (1<<LCD->s_LCDCtrlPins.rspin) | (1<<LCD->s_LCDCtrlPins.rwpin);
	GPIO_Pin_Configure_t pin = {LCD->s_LCDCtrlPins.enpin ,GPIO_MODE_OUTPUT_PP, GPIO_SPEED_10M};
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	88db      	ldrh	r3, [r3, #6]
 80003a0:	813b      	strh	r3, [r7, #8]
 80003a2:	2304      	movs	r3, #4
 80003a4:	72bb      	strb	r3, [r7, #10]
 80003a6:	2301      	movs	r3, #1
 80003a8:	72fb      	strb	r3, [r7, #11]
	MCAL_GPIO_Init(LCD->s_LCDCtrlPins.GPIOX,&pin);
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	681b      	ldr	r3, [r3, #0]
 80003ae:	f107 0208 	add.w	r2, r7, #8
 80003b2:	4611      	mov	r1, r2
 80003b4:	4618      	mov	r0, r3
 80003b6:	f000 fda4 	bl	8000f02 <MCAL_GPIO_Init>
	pin.GPIO_Pin_Number = LCD->s_LCDCtrlPins.rspin;
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	889b      	ldrh	r3, [r3, #4]
 80003be:	813b      	strh	r3, [r7, #8]
	MCAL_GPIO_Init(LCD->s_LCDCtrlPins.GPIOX,&pin);
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	f107 0208 	add.w	r2, r7, #8
 80003c8:	4611      	mov	r1, r2
 80003ca:	4618      	mov	r0, r3
 80003cc:	f000 fd99 	bl	8000f02 <MCAL_GPIO_Init>
	LCD->Ch_Counter = 0;
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	2200      	movs	r2, #0
 80003d4:	74da      	strb	r2, [r3, #19]
	if(LCD->e_OperMode < EIGHTBIT_1LINE_7DOT)	// 4 bits
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	7c9b      	ldrb	r3, [r3, #18]
 80003da:	2b0f      	cmp	r3, #15
 80003dc:	d819      	bhi.n	8000412 <LCD_init+0x7e>
	{
		//*(LCD->s_LCDDataPins.p_DataDireReg) |= (0x0F << LCD->s_LCDDataPins.DataPinStart);
		for(uint8_t i =0;i<4;i++){
 80003de:	2300      	movs	r3, #0
 80003e0:	73fb      	strb	r3, [r7, #15]
 80003e2:	e012      	b.n	800040a <LCD_init+0x76>
			pin.GPIO_Pin_Number = LCD->s_LCDDataPins.DataPinStart << i;
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	899b      	ldrh	r3, [r3, #12]
 80003e8:	461a      	mov	r2, r3
 80003ea:	7bfb      	ldrb	r3, [r7, #15]
 80003ec:	fa02 f303 	lsl.w	r3, r2, r3
 80003f0:	b29b      	uxth	r3, r3
 80003f2:	813b      	strh	r3, [r7, #8]
			MCAL_GPIO_Init(LCD->s_LCDDataPins.GPIOX,&pin);
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	689b      	ldr	r3, [r3, #8]
 80003f8:	f107 0208 	add.w	r2, r7, #8
 80003fc:	4611      	mov	r1, r2
 80003fe:	4618      	mov	r0, r3
 8000400:	f000 fd7f 	bl	8000f02 <MCAL_GPIO_Init>
		for(uint8_t i =0;i<4;i++){
 8000404:	7bfb      	ldrb	r3, [r7, #15]
 8000406:	3301      	adds	r3, #1
 8000408:	73fb      	strb	r3, [r7, #15]
 800040a:	7bfb      	ldrb	r3, [r7, #15]
 800040c:	2b03      	cmp	r3, #3
 800040e:	d9e9      	bls.n	80003e4 <LCD_init+0x50>
 8000410:	e018      	b.n	8000444 <LCD_init+0xb0>
		}
	}
	else
	{
		for(uint8_t i =0;i<8;i++){
 8000412:	2300      	movs	r3, #0
 8000414:	73bb      	strb	r3, [r7, #14]
 8000416:	e012      	b.n	800043e <LCD_init+0xaa>
			pin.GPIO_Pin_Number = LCD->s_LCDDataPins.DataPinStart << i;
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	899b      	ldrh	r3, [r3, #12]
 800041c:	461a      	mov	r2, r3
 800041e:	7bbb      	ldrb	r3, [r7, #14]
 8000420:	fa02 f303 	lsl.w	r3, r2, r3
 8000424:	b29b      	uxth	r3, r3
 8000426:	813b      	strh	r3, [r7, #8]
			MCAL_GPIO_Init(LCD->s_LCDDataPins.GPIOX,&pin);
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	689b      	ldr	r3, [r3, #8]
 800042c:	f107 0208 	add.w	r2, r7, #8
 8000430:	4611      	mov	r1, r2
 8000432:	4618      	mov	r0, r3
 8000434:	f000 fd65 	bl	8000f02 <MCAL_GPIO_Init>
		for(uint8_t i =0;i<8;i++){
 8000438:	7bbb      	ldrb	r3, [r7, #14]
 800043a:	3301      	adds	r3, #1
 800043c:	73bb      	strb	r3, [r7, #14]
 800043e:	7bbb      	ldrb	r3, [r7, #14]
 8000440:	2b07      	cmp	r3, #7
 8000442:	d9e9      	bls.n	8000418 <LCD_init+0x84>
		}
	}
	LCD_sendchar(LCD ,RETURN_HOME , COMMAND );
 8000444:	2200      	movs	r2, #0
 8000446:	2102      	movs	r1, #2
 8000448:	6878      	ldr	r0, [r7, #4]
 800044a:	f000 f82a 	bl	80004a2 <LCD_sendchar>
	LCD_sendchar(LCD ,FUNCTION_SET + LCD->e_OperMode , COMMAND );
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	7c9b      	ldrb	r3, [r3, #18]
 8000452:	3320      	adds	r3, #32
 8000454:	b2db      	uxtb	r3, r3
 8000456:	2200      	movs	r2, #0
 8000458:	4619      	mov	r1, r3
 800045a:	6878      	ldr	r0, [r7, #4]
 800045c:	f000 f821 	bl	80004a2 <LCD_sendchar>
	LCD_sendchar(LCD ,DISPLAY_CONTROL + LCD->e_DispCtrl , COMMAND );
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	7c5b      	ldrb	r3, [r3, #17]
 8000464:	3308      	adds	r3, #8
 8000466:	b2db      	uxtb	r3, r3
 8000468:	2200      	movs	r2, #0
 800046a:	4619      	mov	r1, r3
 800046c:	6878      	ldr	r0, [r7, #4]
 800046e:	f000 f818 	bl	80004a2 <LCD_sendchar>
	LCD_sendchar(LCD ,ENTRY_MODE_SET + LCD->e_EntryMode , COMMAND );
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	7c1b      	ldrb	r3, [r3, #16]
 8000476:	3304      	adds	r3, #4
 8000478:	b2db      	uxtb	r3, r3
 800047a:	2200      	movs	r2, #0
 800047c:	4619      	mov	r1, r3
 800047e:	6878      	ldr	r0, [r7, #4]
 8000480:	f000 f80f 	bl	80004a2 <LCD_sendchar>
	LCD_clearscreen(LCD);
 8000484:	6878      	ldr	r0, [r7, #4]
 8000486:	f000 f8d8 	bl	800063a <LCD_clearscreen>
	LCD_returnhome(LCD);
 800048a:	6878      	ldr	r0, [r7, #4]
 800048c:	f000 f8e5 	bl	800065a <LCD_returnhome>
	LCD_sendchar(LCD ,SET_DD_ADDRESS , COMMAND );
 8000490:	2200      	movs	r2, #0
 8000492:	2180      	movs	r1, #128	; 0x80
 8000494:	6878      	ldr	r0, [r7, #4]
 8000496:	f000 f804 	bl	80004a2 <LCD_sendchar>
}
 800049a:	bf00      	nop
 800049c:	3710      	adds	r7, #16
 800049e:	46bd      	mov	sp, r7
 80004a0:	bd80      	pop	{r7, pc}

080004a2 <LCD_sendchar>:
void LCD_sendchar(s_LCD_Config_t  *  LCD ,unsigned char data ,e_LCDCharType_t e_LCDCharType)
{
 80004a2:	b580      	push	{r7, lr}
 80004a4:	b082      	sub	sp, #8
 80004a6:	af00      	add	r7, sp, #0
 80004a8:	6078      	str	r0, [r7, #4]
 80004aa:	460b      	mov	r3, r1
 80004ac:	70fb      	strb	r3, [r7, #3]
 80004ae:	4613      	mov	r3, r2
 80004b0:	70bb      	strb	r3, [r7, #2]
	LCDIsbusy(LCD);
 80004b2:	6878      	ldr	r0, [r7, #4]
 80004b4:	f000 f8b6 	bl	8000624 <LCDIsbusy>
	if(LCD->e_OperMode < EIGHTBIT_1LINE_7DOT)	// 4 bits
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	7c9b      	ldrb	r3, [r3, #18]
 80004bc:	2b0f      	cmp	r3, #15
 80004be:	d846      	bhi.n	800054e <LCD_sendchar+0xac>
	{
		//void MCAL_GPIO_WriteGroup(GPIO_TypeDef * GPIOx,uint16_t Vlaue,uint16_t mask);
		//*(LCD->s_LCDDataPins.p_PortReg) &= ~(0x0F << LCD->s_LCDDataPins.DataPinStart);						// clear the data pins
		//*(LCD->s_LCDDataPins.p_PortReg) = (((data & 0xF0) >> 4) << LCD->s_LCDDataPins.DataPinStart);		//the high nibble
		MCAL_GPIO_WriteGroup(LCD->s_LCDDataPins.GPIOX
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	6898      	ldr	r0, [r3, #8]
				,((data & 0xF0) >> 4)*LCD->s_LCDDataPins.DataPinStart
 80004c4:	78fb      	ldrb	r3, [r7, #3]
 80004c6:	091b      	lsrs	r3, r3, #4
 80004c8:	b2db      	uxtb	r3, r3
 80004ca:	b29b      	uxth	r3, r3
 80004cc:	687a      	ldr	r2, [r7, #4]
 80004ce:	8992      	ldrh	r2, [r2, #12]
		MCAL_GPIO_WriteGroup(LCD->s_LCDDataPins.GPIOX
 80004d0:	fb02 f303 	mul.w	r3, r2, r3
 80004d4:	b299      	uxth	r1, r3
				,0x0F*LCD->s_LCDDataPins.DataPinStart);
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	899b      	ldrh	r3, [r3, #12]
		MCAL_GPIO_WriteGroup(LCD->s_LCDDataPins.GPIOX
 80004da:	461a      	mov	r2, r3
 80004dc:	0112      	lsls	r2, r2, #4
 80004de:	1ad3      	subs	r3, r2, r3
 80004e0:	b29b      	uxth	r3, r3
 80004e2:	461a      	mov	r2, r3
 80004e4:	f000 fddc 	bl	80010a0 <MCAL_GPIO_WriteGroup>
		if(e_LCDCharType == COMMAND)
 80004e8:	78bb      	ldrb	r3, [r7, #2]
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d108      	bne.n	8000500 <LCD_sendchar+0x5e>
			//BITCLEAR(*(LCD->s_LCDCtrlPins.p_PortReg),LCD->s_LCDCtrlPins.rspin);
			MCAL_GPIO_WritePin(LCD->s_LCDCtrlPins.GPIOX,LCD->s_LCDCtrlPins.rspin,GPIO_PIN_FALSE);
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	6818      	ldr	r0, [r3, #0]
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	889b      	ldrh	r3, [r3, #4]
 80004f6:	2200      	movs	r2, #0
 80004f8:	4619      	mov	r1, r3
 80004fa:	f000 fda5 	bl	8001048 <MCAL_GPIO_WritePin>
 80004fe:	e007      	b.n	8000510 <LCD_sendchar+0x6e>
		else{
			//BITSET(*(LCD->s_LCDCtrlPins.p_PortReg),LCD->s_LCDCtrlPins.rspin);
			MCAL_GPIO_WritePin(LCD->s_LCDCtrlPins.GPIOX,LCD->s_LCDCtrlPins.rspin,GPIO_PIN_TRUE);
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	6818      	ldr	r0, [r3, #0]
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	889b      	ldrh	r3, [r3, #4]
 8000508:	2201      	movs	r2, #1
 800050a:	4619      	mov	r1, r3
 800050c:	f000 fd9c 	bl	8001048 <MCAL_GPIO_WritePin>
		}

		LCD_kick(LCD);
 8000510:	6878      	ldr	r0, [r7, #4]
 8000512:	f7ff ff24 	bl	800035e <LCD_kick>

		//*(LCD->s_LCDDataPins.p_PortReg) &= ~(0x0F << LCD->s_LCDDataPins.DataPinStart);
		//*(LCD->s_LCDDataPins.p_PortReg) |= ((data & 0x0F) << LCD->s_LCDDataPins.DataPinStart);
		MCAL_GPIO_WriteGroup(LCD->s_LCDDataPins.GPIOX
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	6898      	ldr	r0, [r3, #8]
 800051a:	78fb      	ldrb	r3, [r7, #3]
 800051c:	b29b      	uxth	r3, r3
 800051e:	f003 030f 	and.w	r3, r3, #15
 8000522:	b29b      	uxth	r3, r3
				,(data & 0x0F)*LCD->s_LCDDataPins.DataPinStart
 8000524:	687a      	ldr	r2, [r7, #4]
 8000526:	8992      	ldrh	r2, [r2, #12]
		MCAL_GPIO_WriteGroup(LCD->s_LCDDataPins.GPIOX
 8000528:	fb02 f303 	mul.w	r3, r2, r3
 800052c:	b299      	uxth	r1, r3
				,0x0F*LCD->s_LCDDataPins.DataPinStart);
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	899b      	ldrh	r3, [r3, #12]
		MCAL_GPIO_WriteGroup(LCD->s_LCDDataPins.GPIOX
 8000532:	461a      	mov	r2, r3
 8000534:	0112      	lsls	r2, r2, #4
 8000536:	1ad3      	subs	r3, r2, r3
 8000538:	b29b      	uxth	r3, r3
 800053a:	461a      	mov	r2, r3
 800053c:	f000 fdb0 	bl	80010a0 <MCAL_GPIO_WriteGroup>

		LCD_kick(LCD);
 8000540:	6878      	ldr	r0, [r7, #4]
 8000542:	f7ff ff0c 	bl	800035e <LCD_kick>
		LCD_delay(1);
 8000546:	2001      	movs	r0, #1
 8000548:	f7ff feec 	bl	8000324 <LCD_delay>
 800054c:	e028      	b.n	80005a0 <LCD_sendchar+0xfe>
	}
	else
	{						//8bit mode
		//*(LCD->s_LCDDataPins.p_PortReg) &= ~(0xFF << LCD->s_LCDDataPins.DataPinStart);
		//*(LCD->s_LCDDataPins.p_PortReg) |= (data << LCD->s_LCDDataPins.DataPinStart);
		MCAL_GPIO_WriteGroup(LCD->s_LCDDataPins.GPIOX
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	6898      	ldr	r0, [r3, #8]
 8000552:	78fb      	ldrb	r3, [r7, #3]
 8000554:	b29b      	uxth	r3, r3
				,(data & 0xFF)*LCD->s_LCDDataPins.DataPinStart
 8000556:	687a      	ldr	r2, [r7, #4]
 8000558:	8992      	ldrh	r2, [r2, #12]
		MCAL_GPIO_WriteGroup(LCD->s_LCDDataPins.GPIOX
 800055a:	fb02 f303 	mul.w	r3, r2, r3
 800055e:	b299      	uxth	r1, r3
				,0xFF*LCD->s_LCDDataPins.DataPinStart);
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	899b      	ldrh	r3, [r3, #12]
		MCAL_GPIO_WriteGroup(LCD->s_LCDDataPins.GPIOX
 8000564:	461a      	mov	r2, r3
 8000566:	0212      	lsls	r2, r2, #8
 8000568:	1ad3      	subs	r3, r2, r3
 800056a:	b29b      	uxth	r3, r3
 800056c:	461a      	mov	r2, r3
 800056e:	f000 fd97 	bl	80010a0 <MCAL_GPIO_WriteGroup>
		if(e_LCDCharType == COMMAND)
 8000572:	78bb      	ldrb	r3, [r7, #2]
 8000574:	2b00      	cmp	r3, #0
 8000576:	d108      	bne.n	800058a <LCD_sendchar+0xe8>
			//BITCLEAR(*(LCD->s_LCDCtrlPins.p_PortReg),LCD->s_LCDCtrlPins.rspin);
			MCAL_GPIO_WritePin(LCD->s_LCDCtrlPins.GPIOX,LCD->s_LCDCtrlPins.rspin,GPIO_PIN_FALSE);
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	6818      	ldr	r0, [r3, #0]
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	889b      	ldrh	r3, [r3, #4]
 8000580:	2200      	movs	r2, #0
 8000582:	4619      	mov	r1, r3
 8000584:	f000 fd60 	bl	8001048 <MCAL_GPIO_WritePin>
 8000588:	e007      	b.n	800059a <LCD_sendchar+0xf8>
		else{
			//BITSET(*(LCD->s_LCDCtrlPins.p_PortReg),LCD->s_LCDCtrlPins.rspin);
			MCAL_GPIO_WritePin(LCD->s_LCDCtrlPins.GPIOX,LCD->s_LCDCtrlPins.rspin,GPIO_PIN_TRUE);
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	6818      	ldr	r0, [r3, #0]
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	889b      	ldrh	r3, [r3, #4]
 8000592:	2201      	movs	r2, #1
 8000594:	4619      	mov	r1, r3
 8000596:	f000 fd57 	bl	8001048 <MCAL_GPIO_WritePin>

		}
		LCD_kick(LCD);
 800059a:	6878      	ldr	r0, [r7, #4]
 800059c:	f7ff fedf 	bl	800035e <LCD_kick>
	}
	if(e_LCDCharType == DATA){
 80005a0:	78bb      	ldrb	r3, [r7, #2]
 80005a2:	2b01      	cmp	r3, #1
 80005a4:	d122      	bne.n	80005ec <LCD_sendchar+0x14a>
		LCD->Ch_Counter ++;
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	7cdb      	ldrb	r3, [r3, #19]
 80005aa:	3301      	adds	r3, #1
 80005ac:	b2da      	uxtb	r2, r3
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	74da      	strb	r2, [r3, #19]
			if(LCD->Ch_Counter==LINE_DIGITS)
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	7cdb      	ldrb	r3, [r3, #19]
 80005b6:	2b10      	cmp	r3, #16
 80005b8:	d105      	bne.n	80005c6 <LCD_sendchar+0x124>
				LCD_gotoxy(LCD,0,1);
 80005ba:	2201      	movs	r2, #1
 80005bc:	2100      	movs	r1, #0
 80005be:	6878      	ldr	r0, [r7, #4]
 80005c0:	f000 f85c 	bl	800067c <LCD_gotoxy>
			else if (LCD->Ch_Counter==2*LINE_DIGITS)
				LCD_gotoxy(LCD,0,2);
			else if (LCD->Ch_Counter==3*LINE_DIGITS)
				LCD_gotoxy(LCD,0,3);
		}
}
 80005c4:	e012      	b.n	80005ec <LCD_sendchar+0x14a>
			else if (LCD->Ch_Counter==2*LINE_DIGITS)
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	7cdb      	ldrb	r3, [r3, #19]
 80005ca:	2b20      	cmp	r3, #32
 80005cc:	d105      	bne.n	80005da <LCD_sendchar+0x138>
				LCD_gotoxy(LCD,0,2);
 80005ce:	2202      	movs	r2, #2
 80005d0:	2100      	movs	r1, #0
 80005d2:	6878      	ldr	r0, [r7, #4]
 80005d4:	f000 f852 	bl	800067c <LCD_gotoxy>
}
 80005d8:	e008      	b.n	80005ec <LCD_sendchar+0x14a>
			else if (LCD->Ch_Counter==3*LINE_DIGITS)
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	7cdb      	ldrb	r3, [r3, #19]
 80005de:	2b30      	cmp	r3, #48	; 0x30
 80005e0:	d104      	bne.n	80005ec <LCD_sendchar+0x14a>
				LCD_gotoxy(LCD,0,3);
 80005e2:	2203      	movs	r2, #3
 80005e4:	2100      	movs	r1, #0
 80005e6:	6878      	ldr	r0, [r7, #4]
 80005e8:	f000 f848 	bl	800067c <LCD_gotoxy>
}
 80005ec:	bf00      	nop
 80005ee:	3708      	adds	r7, #8
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}

080005f4 <LCD_sendstring>:
void LCD_sendstring(s_LCD_Config_t  * LCD , const char *  data)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b082      	sub	sp, #8
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
 80005fc:	6039      	str	r1, [r7, #0]
	for(;*data != '\0';data++){
 80005fe:	e009      	b.n	8000614 <LCD_sendstring+0x20>
		LCD_sendchar(LCD,*data,DATA);
 8000600:	683b      	ldr	r3, [r7, #0]
 8000602:	781b      	ldrb	r3, [r3, #0]
 8000604:	2201      	movs	r2, #1
 8000606:	4619      	mov	r1, r3
 8000608:	6878      	ldr	r0, [r7, #4]
 800060a:	f7ff ff4a 	bl	80004a2 <LCD_sendchar>
	for(;*data != '\0';data++){
 800060e:	683b      	ldr	r3, [r7, #0]
 8000610:	3301      	adds	r3, #1
 8000612:	603b      	str	r3, [r7, #0]
 8000614:	683b      	ldr	r3, [r7, #0]
 8000616:	781b      	ldrb	r3, [r3, #0]
 8000618:	2b00      	cmp	r3, #0
 800061a:	d1f1      	bne.n	8000600 <LCD_sendstring+0xc>
	}
}
 800061c:	bf00      	nop
 800061e:	3708      	adds	r7, #8
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}

08000624 <LCDIsbusy>:
void LCDIsbusy(s_LCD_Config_t  * LCD)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b082      	sub	sp, #8
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
	//currently I'm working on reading the actual busy flag
	//for the end of the dev process xD let it simply a delay.
	LCD_delay(1);
 800062c:	2001      	movs	r0, #1
 800062e:	f7ff fe79 	bl	8000324 <LCD_delay>
}
 8000632:	bf00      	nop
 8000634:	3708      	adds	r7, #8
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}

0800063a <LCD_clearscreen>:

void LCD_clearscreen(s_LCD_Config_t  * LCD)
{
 800063a:	b580      	push	{r7, lr}
 800063c:	b082      	sub	sp, #8
 800063e:	af00      	add	r7, sp, #0
 8000640:	6078      	str	r0, [r7, #4]
	LCD_sendchar(LCD , ClEAR_SCREEN , COMMAND );
 8000642:	2200      	movs	r2, #0
 8000644:	2101      	movs	r1, #1
 8000646:	6878      	ldr	r0, [r7, #4]
 8000648:	f7ff ff2b 	bl	80004a2 <LCD_sendchar>
	LCD->Ch_Counter=0;
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	2200      	movs	r2, #0
 8000650:	74da      	strb	r2, [r3, #19]
}
 8000652:	bf00      	nop
 8000654:	3708      	adds	r7, #8
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}

0800065a <LCD_returnhome>:
void LCD_returnhome(s_LCD_Config_t  * LCD)
{
 800065a:	b580      	push	{r7, lr}
 800065c:	b082      	sub	sp, #8
 800065e:	af00      	add	r7, sp, #0
 8000660:	6078      	str	r0, [r7, #4]
	LCD_sendchar(LCD , RETURN_HOME , COMMAND );
 8000662:	2200      	movs	r2, #0
 8000664:	2102      	movs	r1, #2
 8000666:	6878      	ldr	r0, [r7, #4]
 8000668:	f7ff ff1b 	bl	80004a2 <LCD_sendchar>
	LCD->Ch_Counter=0;
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	2200      	movs	r2, #0
 8000670:	74da      	strb	r2, [r3, #19]
}
 8000672:	bf00      	nop
 8000674:	3708      	adds	r7, #8
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
	...

0800067c <LCD_gotoxy>:
void LCD_gotoxy(s_LCD_Config_t  * LCD , unsigned char x , unsigned char y)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b084      	sub	sp, #16
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
 8000684:	460b      	mov	r3, r1
 8000686:	70fb      	strb	r3, [r7, #3]
 8000688:	4613      	mov	r3, r2
 800068a:	70bb      	strb	r3, [r7, #2]
	uint32_t address;
	switch(y)
 800068c:	78bb      	ldrb	r3, [r7, #2]
 800068e:	2b03      	cmp	r3, #3
 8000690:	d819      	bhi.n	80006c6 <LCD_gotoxy+0x4a>
 8000692:	a201      	add	r2, pc, #4	; (adr r2, 8000698 <LCD_gotoxy+0x1c>)
 8000694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000698:	080006a9 	.word	0x080006a9
 800069c:	080006af 	.word	0x080006af
 80006a0:	080006b7 	.word	0x080006b7
 80006a4:	080006bf 	.word	0x080006bf
	{
	case 0:
		address = x;
 80006a8:	78fb      	ldrb	r3, [r7, #3]
 80006aa:	60fb      	str	r3, [r7, #12]
		break;
 80006ac:	e00b      	b.n	80006c6 <LCD_gotoxy+0x4a>
	case 1:
		address = 0x40+x;
 80006ae:	78fb      	ldrb	r3, [r7, #3]
 80006b0:	3340      	adds	r3, #64	; 0x40
 80006b2:	60fb      	str	r3, [r7, #12]
		break;
 80006b4:	e007      	b.n	80006c6 <LCD_gotoxy+0x4a>
	case 2:
		address = 0x14+x;
 80006b6:	78fb      	ldrb	r3, [r7, #3]
 80006b8:	3314      	adds	r3, #20
 80006ba:	60fb      	str	r3, [r7, #12]
		break;
 80006bc:	e003      	b.n	80006c6 <LCD_gotoxy+0x4a>
	case 3:
		address = 0x54+x;
 80006be:	78fb      	ldrb	r3, [r7, #3]
 80006c0:	3354      	adds	r3, #84	; 0x54
 80006c2:	60fb      	str	r3, [r7, #12]
		break;
 80006c4:	bf00      	nop
	}
	LCD->Ch_Counter=y*LINE_DIGITS+x;
 80006c6:	78bb      	ldrb	r3, [r7, #2]
 80006c8:	011b      	lsls	r3, r3, #4
 80006ca:	b2da      	uxtb	r2, r3
 80006cc:	78fb      	ldrb	r3, [r7, #3]
 80006ce:	4413      	add	r3, r2
 80006d0:	b2da      	uxtb	r2, r3
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	74da      	strb	r2, [r3, #19]
	LCD_sendchar(LCD,SET_DD_ADDRESS+address,COMMAND);
 80006d6:	68fb      	ldr	r3, [r7, #12]
 80006d8:	b2db      	uxtb	r3, r3
 80006da:	3b80      	subs	r3, #128	; 0x80
 80006dc:	b2db      	uxtb	r3, r3
 80006de:	2200      	movs	r2, #0
 80006e0:	4619      	mov	r1, r3
 80006e2:	6878      	ldr	r0, [r7, #4]
 80006e4:	f7ff fedd 	bl	80004a2 <LCD_sendchar>
}
 80006e8:	bf00      	nop
 80006ea:	3710      	adds	r7, #16
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}

080006f0 <Servo1_Entry_Gate_Init>:
#define Down 2


//B8 SERVO1
void Servo1_Entry_Gate_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b082      	sub	sp, #8
 80006f4:	af00      	add	r7, sp, #0
	/*SERVO MOTOR 1*/
	GPIO_Pin_Configure_t PinCinfg;
	PinCinfg.GPIO_Pin_Number=GPIO_PIN_8;
 80006f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006fa:	80bb      	strh	r3, [r7, #4]
	PinCinfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80006fc:	2304      	movs	r3, #4
 80006fe:	71bb      	strb	r3, [r7, #6]
	PinCinfg.GPIO_OUTPUT_SPEED =GPIO_SPEED_10M;
 8000700:	2301      	movs	r3, #1
 8000702:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB, &PinCinfg);
 8000704:	1d3b      	adds	r3, r7, #4
 8000706:	4619      	mov	r1, r3
 8000708:	4803      	ldr	r0, [pc, #12]	; (8000718 <Servo1_Entry_Gate_Init+0x28>)
 800070a:	f000 fbfa 	bl	8000f02 <MCAL_GPIO_Init>
}
 800070e:	bf00      	nop
 8000710:	3708      	adds	r7, #8
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	40010c00 	.word	0x40010c00

0800071c <Servo1_Entry_Gate>:

//Direction Up or Down
void Servo1_Entry_Gate(uint8_t Direction)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0
 8000722:	4603      	mov	r3, r0
 8000724:	71fb      	strb	r3, [r7, #7]
	if(Direction == UP)
 8000726:	79fb      	ldrb	r3, [r7, #7]
 8000728:	2b01      	cmp	r3, #1
 800072a:	d10f      	bne.n	800074c <Servo1_Entry_Gate+0x30>
	{
		//servo1 Enter gate up +90
		MCAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, 1);
 800072c:	2201      	movs	r2, #1
 800072e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000732:	4812      	ldr	r0, [pc, #72]	; (800077c <Servo1_Entry_Gate+0x60>)
 8000734:	f000 fc88 	bl	8001048 <MCAL_GPIO_WritePin>
		dus(500);
 8000738:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800073c:	f000 fd62 	bl	8001204 <dus>
		MCAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, 0);
 8000740:	2200      	movs	r2, #0
 8000742:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000746:	480d      	ldr	r0, [pc, #52]	; (800077c <Servo1_Entry_Gate+0x60>)
 8000748:	f000 fc7e 	bl	8001048 <MCAL_GPIO_WritePin>
	}
	if(Direction==Down)
 800074c:	79fb      	ldrb	r3, [r7, #7]
 800074e:	2b02      	cmp	r3, #2
 8000750:	d10f      	bne.n	8000772 <Servo1_Entry_Gate+0x56>
	{
		//servo1 Enter gate down -90
		MCAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, 1);
 8000752:	2201      	movs	r2, #1
 8000754:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000758:	4808      	ldr	r0, [pc, #32]	; (800077c <Servo1_Entry_Gate+0x60>)
 800075a:	f000 fc75 	bl	8001048 <MCAL_GPIO_WritePin>
		dus(1488);
 800075e:	f44f 60ba 	mov.w	r0, #1488	; 0x5d0
 8000762:	f000 fd4f 	bl	8001204 <dus>
		MCAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, 0);
 8000766:	2200      	movs	r2, #0
 8000768:	f44f 7180 	mov.w	r1, #256	; 0x100
 800076c:	4803      	ldr	r0, [pc, #12]	; (800077c <Servo1_Entry_Gate+0x60>)
 800076e:	f000 fc6b 	bl	8001048 <MCAL_GPIO_WritePin>
	}


}
 8000772:	bf00      	nop
 8000774:	3708      	adds	r7, #8
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	40010c00 	.word	0x40010c00

08000780 <Servo2_Exit_Gate_Init>:

//B9 SERVO2
void Servo2_Exit_Gate_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b082      	sub	sp, #8
 8000784:	af00      	add	r7, sp, #0
	/*SERVO MOTOR 2*/
	GPIO_Pin_Configure_t PinCinfg;
	PinCinfg.GPIO_Pin_Number=GPIO_PIN_9;
 8000786:	f44f 7300 	mov.w	r3, #512	; 0x200
 800078a:	80bb      	strh	r3, [r7, #4]
	PinCinfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 800078c:	2304      	movs	r3, #4
 800078e:	71bb      	strb	r3, [r7, #6]
	PinCinfg.GPIO_OUTPUT_SPEED =GPIO_SPEED_10M;
 8000790:	2301      	movs	r3, #1
 8000792:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB, &PinCinfg);
 8000794:	1d3b      	adds	r3, r7, #4
 8000796:	4619      	mov	r1, r3
 8000798:	4803      	ldr	r0, [pc, #12]	; (80007a8 <Servo2_Exit_Gate_Init+0x28>)
 800079a:	f000 fbb2 	bl	8000f02 <MCAL_GPIO_Init>
}
 800079e:	bf00      	nop
 80007a0:	3708      	adds	r7, #8
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	40010c00 	.word	0x40010c00

080007ac <Servo2_Exit_Gate>:

//Direction Up or Down
void Servo2_Exit_Gate(uint8_t Direction)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b084      	sub	sp, #16
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	4603      	mov	r3, r0
 80007b4:	71fb      	strb	r3, [r7, #7]
	if(Direction == UP)
 80007b6:	79fb      	ldrb	r3, [r7, #7]
 80007b8:	2b01      	cmp	r3, #1
 80007ba:	d10f      	bne.n	80007dc <Servo2_Exit_Gate+0x30>
	{
		//servo2 Exit gate up +90
		GPIO_Pin_Configure_t PinCinfg;
		MCAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, 1);
 80007bc:	2201      	movs	r2, #1
 80007be:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007c2:	4812      	ldr	r0, [pc, #72]	; (800080c <Servo2_Exit_Gate+0x60>)
 80007c4:	f000 fc40 	bl	8001048 <MCAL_GPIO_WritePin>
		dus(500);
 80007c8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007cc:	f000 fd1a 	bl	8001204 <dus>
		MCAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, 0);
 80007d0:	2200      	movs	r2, #0
 80007d2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007d6:	480d      	ldr	r0, [pc, #52]	; (800080c <Servo2_Exit_Gate+0x60>)
 80007d8:	f000 fc36 	bl	8001048 <MCAL_GPIO_WritePin>
	}

	if(Direction == Down)
 80007dc:	79fb      	ldrb	r3, [r7, #7]
 80007de:	2b02      	cmp	r3, #2
 80007e0:	d10f      	bne.n	8000802 <Servo2_Exit_Gate+0x56>
	{
		//servo2 Exit gate down -90
		MCAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, 1);
 80007e2:	2201      	movs	r2, #1
 80007e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007e8:	4808      	ldr	r0, [pc, #32]	; (800080c <Servo2_Exit_Gate+0x60>)
 80007ea:	f000 fc2d 	bl	8001048 <MCAL_GPIO_WritePin>
		dus(1488);
 80007ee:	f44f 60ba 	mov.w	r0, #1488	; 0x5d0
 80007f2:	f000 fd07 	bl	8001204 <dus>
		MCAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, 0);
 80007f6:	2200      	movs	r2, #0
 80007f8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007fc:	4803      	ldr	r0, [pc, #12]	; (800080c <Servo2_Exit_Gate+0x60>)
 80007fe:	f000 fc23 	bl	8001048 <MCAL_GPIO_WritePin>
	}

}
 8000802:	bf00      	nop
 8000804:	3710      	adds	r7, #16
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	40010c00 	.word	0x40010c00

08000810 <EXTI0_IRQHandler>:

/*==========================================================*/
/* ISR FUNCTIONS */
/*==========================================================*/
void EXTI0_IRQHandler(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
	//Clear Binding Register (EXTI_PR) This bit is cleared by writing a ‘1’ into the bit.
	EXTI->PR |=(1<<0);
 8000814:	4b05      	ldr	r3, [pc, #20]	; (800082c <EXTI0_IRQHandler+0x1c>)
 8000816:	695b      	ldr	r3, [r3, #20]
 8000818:	4a04      	ldr	r2, [pc, #16]	; (800082c <EXTI0_IRQHandler+0x1c>)
 800081a:	f043 0301 	orr.w	r3, r3, #1
 800081e:	6153      	str	r3, [r2, #20]
	GP_IRQ_CALLBACK[0]();
 8000820:	4b03      	ldr	r3, [pc, #12]	; (8000830 <EXTI0_IRQHandler+0x20>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	4798      	blx	r3

}
 8000826:	bf00      	nop
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	40010400 	.word	0x40010400
 8000830:	2000004c 	.word	0x2000004c

08000834 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
	//Clear Binding Register (EXTI_PR) This bit is cleared by writing a ‘1’ into the bit.
	EXTI->PR |=(1<<1);
 8000838:	4b05      	ldr	r3, [pc, #20]	; (8000850 <EXTI1_IRQHandler+0x1c>)
 800083a:	695b      	ldr	r3, [r3, #20]
 800083c:	4a04      	ldr	r2, [pc, #16]	; (8000850 <EXTI1_IRQHandler+0x1c>)
 800083e:	f043 0302 	orr.w	r3, r3, #2
 8000842:	6153      	str	r3, [r2, #20]
	GP_IRQ_CALLBACK[1]();
 8000844:	4b03      	ldr	r3, [pc, #12]	; (8000854 <EXTI1_IRQHandler+0x20>)
 8000846:	685b      	ldr	r3, [r3, #4]
 8000848:	4798      	blx	r3

}
 800084a:	bf00      	nop
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	40010400 	.word	0x40010400
 8000854:	2000004c 	.word	0x2000004c

08000858 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
	//Clear Binding Register (EXTI_PR) This bit is cleared by writing a ‘1’ into the bit.
	EXTI->PR |=(1<<2);
 800085c:	4b05      	ldr	r3, [pc, #20]	; (8000874 <EXTI2_IRQHandler+0x1c>)
 800085e:	695b      	ldr	r3, [r3, #20]
 8000860:	4a04      	ldr	r2, [pc, #16]	; (8000874 <EXTI2_IRQHandler+0x1c>)
 8000862:	f043 0304 	orr.w	r3, r3, #4
 8000866:	6153      	str	r3, [r2, #20]
	GP_IRQ_CALLBACK[2]();
 8000868:	4b03      	ldr	r3, [pc, #12]	; (8000878 <EXTI2_IRQHandler+0x20>)
 800086a:	689b      	ldr	r3, [r3, #8]
 800086c:	4798      	blx	r3
}
 800086e:	bf00      	nop
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	40010400 	.word	0x40010400
 8000878:	2000004c 	.word	0x2000004c

0800087c <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
	//Clear Binding Register (EXTI_PR) This bit is cleared by writing a ‘1’ into the bit.
	EXTI->PR |=(1<<3);
 8000880:	4b05      	ldr	r3, [pc, #20]	; (8000898 <EXTI3_IRQHandler+0x1c>)
 8000882:	695b      	ldr	r3, [r3, #20]
 8000884:	4a04      	ldr	r2, [pc, #16]	; (8000898 <EXTI3_IRQHandler+0x1c>)
 8000886:	f043 0308 	orr.w	r3, r3, #8
 800088a:	6153      	str	r3, [r2, #20]
	GP_IRQ_CALLBACK[3]();
 800088c:	4b03      	ldr	r3, [pc, #12]	; (800089c <EXTI3_IRQHandler+0x20>)
 800088e:	68db      	ldr	r3, [r3, #12]
 8000890:	4798      	blx	r3
}
 8000892:	bf00      	nop
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	40010400 	.word	0x40010400
 800089c:	2000004c 	.word	0x2000004c

080008a0 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
	//Clear Binding Register (EXTI_PR) This bit is cleared by writing a ‘1’ into the bit.
	EXTI->PR |=(1<<4);
 80008a4:	4b05      	ldr	r3, [pc, #20]	; (80008bc <EXTI4_IRQHandler+0x1c>)
 80008a6:	695b      	ldr	r3, [r3, #20]
 80008a8:	4a04      	ldr	r2, [pc, #16]	; (80008bc <EXTI4_IRQHandler+0x1c>)
 80008aa:	f043 0310 	orr.w	r3, r3, #16
 80008ae:	6153      	str	r3, [r2, #20]
	GP_IRQ_CALLBACK[4]();
 80008b0:	4b03      	ldr	r3, [pc, #12]	; (80008c0 <EXTI4_IRQHandler+0x20>)
 80008b2:	691b      	ldr	r3, [r3, #16]
 80008b4:	4798      	blx	r3
}
 80008b6:	bf00      	nop
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	40010400 	.word	0x40010400
 80008c0:	2000004c 	.word	0x2000004c

080008c4 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
	//Clear Binding Register (EXTI_PR) This bit is cleared by writing a ‘1’ into the bit.
	if(EXTI->PR & 1<<5) { EXTI->PR |=(1<<5) ; GP_IRQ_CALLBACK[5](); }
 80008c8:	4b26      	ldr	r3, [pc, #152]	; (8000964 <EXTI9_5_IRQHandler+0xa0>)
 80008ca:	695b      	ldr	r3, [r3, #20]
 80008cc:	f003 0320 	and.w	r3, r3, #32
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d008      	beq.n	80008e6 <EXTI9_5_IRQHandler+0x22>
 80008d4:	4b23      	ldr	r3, [pc, #140]	; (8000964 <EXTI9_5_IRQHandler+0xa0>)
 80008d6:	695b      	ldr	r3, [r3, #20]
 80008d8:	4a22      	ldr	r2, [pc, #136]	; (8000964 <EXTI9_5_IRQHandler+0xa0>)
 80008da:	f043 0320 	orr.w	r3, r3, #32
 80008de:	6153      	str	r3, [r2, #20]
 80008e0:	4b21      	ldr	r3, [pc, #132]	; (8000968 <EXTI9_5_IRQHandler+0xa4>)
 80008e2:	695b      	ldr	r3, [r3, #20]
 80008e4:	4798      	blx	r3
	if(EXTI->PR & 1<<6) { EXTI->PR |=(1<<6) ; GP_IRQ_CALLBACK[6](); }
 80008e6:	4b1f      	ldr	r3, [pc, #124]	; (8000964 <EXTI9_5_IRQHandler+0xa0>)
 80008e8:	695b      	ldr	r3, [r3, #20]
 80008ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d008      	beq.n	8000904 <EXTI9_5_IRQHandler+0x40>
 80008f2:	4b1c      	ldr	r3, [pc, #112]	; (8000964 <EXTI9_5_IRQHandler+0xa0>)
 80008f4:	695b      	ldr	r3, [r3, #20]
 80008f6:	4a1b      	ldr	r2, [pc, #108]	; (8000964 <EXTI9_5_IRQHandler+0xa0>)
 80008f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008fc:	6153      	str	r3, [r2, #20]
 80008fe:	4b1a      	ldr	r3, [pc, #104]	; (8000968 <EXTI9_5_IRQHandler+0xa4>)
 8000900:	699b      	ldr	r3, [r3, #24]
 8000902:	4798      	blx	r3
	if(EXTI->PR & 1<<7) { EXTI->PR |=(1<<7) ; GP_IRQ_CALLBACK[7](); }
 8000904:	4b17      	ldr	r3, [pc, #92]	; (8000964 <EXTI9_5_IRQHandler+0xa0>)
 8000906:	695b      	ldr	r3, [r3, #20]
 8000908:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800090c:	2b00      	cmp	r3, #0
 800090e:	d008      	beq.n	8000922 <EXTI9_5_IRQHandler+0x5e>
 8000910:	4b14      	ldr	r3, [pc, #80]	; (8000964 <EXTI9_5_IRQHandler+0xa0>)
 8000912:	695b      	ldr	r3, [r3, #20]
 8000914:	4a13      	ldr	r2, [pc, #76]	; (8000964 <EXTI9_5_IRQHandler+0xa0>)
 8000916:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800091a:	6153      	str	r3, [r2, #20]
 800091c:	4b12      	ldr	r3, [pc, #72]	; (8000968 <EXTI9_5_IRQHandler+0xa4>)
 800091e:	69db      	ldr	r3, [r3, #28]
 8000920:	4798      	blx	r3
	if(EXTI->PR & 1<<8) { EXTI->PR |=(1<<8) ; GP_IRQ_CALLBACK[8](); }
 8000922:	4b10      	ldr	r3, [pc, #64]	; (8000964 <EXTI9_5_IRQHandler+0xa0>)
 8000924:	695b      	ldr	r3, [r3, #20]
 8000926:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800092a:	2b00      	cmp	r3, #0
 800092c:	d008      	beq.n	8000940 <EXTI9_5_IRQHandler+0x7c>
 800092e:	4b0d      	ldr	r3, [pc, #52]	; (8000964 <EXTI9_5_IRQHandler+0xa0>)
 8000930:	695b      	ldr	r3, [r3, #20]
 8000932:	4a0c      	ldr	r2, [pc, #48]	; (8000964 <EXTI9_5_IRQHandler+0xa0>)
 8000934:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000938:	6153      	str	r3, [r2, #20]
 800093a:	4b0b      	ldr	r3, [pc, #44]	; (8000968 <EXTI9_5_IRQHandler+0xa4>)
 800093c:	6a1b      	ldr	r3, [r3, #32]
 800093e:	4798      	blx	r3
	if(EXTI->PR & 1<<9) { EXTI->PR |=(1<<9) ; GP_IRQ_CALLBACK[9](); }
 8000940:	4b08      	ldr	r3, [pc, #32]	; (8000964 <EXTI9_5_IRQHandler+0xa0>)
 8000942:	695b      	ldr	r3, [r3, #20]
 8000944:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000948:	2b00      	cmp	r3, #0
 800094a:	d008      	beq.n	800095e <EXTI9_5_IRQHandler+0x9a>
 800094c:	4b05      	ldr	r3, [pc, #20]	; (8000964 <EXTI9_5_IRQHandler+0xa0>)
 800094e:	695b      	ldr	r3, [r3, #20]
 8000950:	4a04      	ldr	r2, [pc, #16]	; (8000964 <EXTI9_5_IRQHandler+0xa0>)
 8000952:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000956:	6153      	str	r3, [r2, #20]
 8000958:	4b03      	ldr	r3, [pc, #12]	; (8000968 <EXTI9_5_IRQHandler+0xa4>)
 800095a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800095c:	4798      	blx	r3

}
 800095e:	bf00      	nop
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	40010400 	.word	0x40010400
 8000968:	2000004c 	.word	0x2000004c

0800096c <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
	//Clear Binding Register (EXTI_PR) This bit is cleared by writing a ‘1’ into the bit.
	EXTI->PR |=(1<<0);
 8000970:	4b04      	ldr	r3, [pc, #16]	; (8000984 <EXTI15_10_IRQHandler+0x18>)
 8000972:	695b      	ldr	r3, [r3, #20]
 8000974:	4a03      	ldr	r2, [pc, #12]	; (8000984 <EXTI15_10_IRQHandler+0x18>)
 8000976:	f043 0301 	orr.w	r3, r3, #1
 800097a:	6153      	str	r3, [r2, #20]

}
 800097c:	bf00      	nop
 800097e:	46bd      	mov	sp, r7
 8000980:	bc80      	pop	{r7}
 8000982:	4770      	bx	lr
 8000984:	40010400 	.word	0x40010400

08000988 <MCAL_UART_INIT>:
 * note -                   -none
 *
 */
/**================================================================= */
void MCAL_UART_INIT(USART_TypeDef* USARTx,USART_Config * UART_Config)
{
 8000988:	b5b0      	push	{r4, r5, r7, lr}
 800098a:	b084      	sub	sp, #16
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
 8000990:	6039      	str	r1, [r7, #0]

	uint32_t pclk ,BRR;


	//Enable Clock For Given USART Peripheral
	if(USARTx == USART1)
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	4a68      	ldr	r2, [pc, #416]	; (8000b38 <MCAL_UART_INIT+0x1b0>)
 8000996:	4293      	cmp	r3, r2
 8000998:	d10e      	bne.n	80009b8 <MCAL_UART_INIT+0x30>
	{
		RCC_USART1_CLOCK_EN();
 800099a:	4b68      	ldr	r3, [pc, #416]	; (8000b3c <MCAL_UART_INIT+0x1b4>)
 800099c:	699b      	ldr	r3, [r3, #24]
 800099e:	4a67      	ldr	r2, [pc, #412]	; (8000b3c <MCAL_UART_INIT+0x1b4>)
 80009a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009a4:	6193      	str	r3, [r2, #24]
		Global_UART_Config[0] = *UART_Config;
 80009a6:	4a66      	ldr	r2, [pc, #408]	; (8000b40 <MCAL_UART_INIT+0x1b8>)
 80009a8:	683b      	ldr	r3, [r7, #0]
 80009aa:	4614      	mov	r4, r2
 80009ac:	461d      	mov	r5, r3
 80009ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009b2:	682b      	ldr	r3, [r5, #0]
 80009b4:	6023      	str	r3, [r4, #0]
 80009b6:	e026      	b.n	8000a06 <MCAL_UART_INIT+0x7e>
	}
	else if(USARTx == USART2)
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	4a62      	ldr	r2, [pc, #392]	; (8000b44 <MCAL_UART_INIT+0x1bc>)
 80009bc:	4293      	cmp	r3, r2
 80009be:	d10f      	bne.n	80009e0 <MCAL_UART_INIT+0x58>
	{
		RCC_USART2_CLOCK_EN();
 80009c0:	4b5e      	ldr	r3, [pc, #376]	; (8000b3c <MCAL_UART_INIT+0x1b4>)
 80009c2:	69db      	ldr	r3, [r3, #28]
 80009c4:	4a5d      	ldr	r2, [pc, #372]	; (8000b3c <MCAL_UART_INIT+0x1b4>)
 80009c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009ca:	61d3      	str	r3, [r2, #28]
		Global_UART_Config[1] = *UART_Config;
 80009cc:	4b5c      	ldr	r3, [pc, #368]	; (8000b40 <MCAL_UART_INIT+0x1b8>)
 80009ce:	683a      	ldr	r2, [r7, #0]
 80009d0:	f103 0414 	add.w	r4, r3, #20
 80009d4:	4615      	mov	r5, r2
 80009d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009da:	682b      	ldr	r3, [r5, #0]
 80009dc:	6023      	str	r3, [r4, #0]
 80009de:	e012      	b.n	8000a06 <MCAL_UART_INIT+0x7e>
	}
	else if(USARTx == USART3)
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	4a59      	ldr	r2, [pc, #356]	; (8000b48 <MCAL_UART_INIT+0x1c0>)
 80009e4:	4293      	cmp	r3, r2
 80009e6:	d10e      	bne.n	8000a06 <MCAL_UART_INIT+0x7e>
	{
		RCC_USART3_CLOCK_EN();
 80009e8:	4b54      	ldr	r3, [pc, #336]	; (8000b3c <MCAL_UART_INIT+0x1b4>)
 80009ea:	69db      	ldr	r3, [r3, #28]
 80009ec:	4a53      	ldr	r2, [pc, #332]	; (8000b3c <MCAL_UART_INIT+0x1b4>)
 80009ee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009f2:	61d3      	str	r3, [r2, #28]
		Global_UART_Config[2] = *UART_Config;
 80009f4:	4b52      	ldr	r3, [pc, #328]	; (8000b40 <MCAL_UART_INIT+0x1b8>)
 80009f6:	683a      	ldr	r2, [r7, #0]
 80009f8:	f103 0428 	add.w	r4, r3, #40	; 0x28
 80009fc:	4615      	mov	r5, r2
 80009fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a00:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a02:	682b      	ldr	r3, [r5, #0]
 8000a04:	6023      	str	r3, [r4, #0]
	}

	//Enable UART Module Bit 13 UE: USART enable
	USARTx->CR1 |=(1<<13);
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	68db      	ldr	r3, [r3, #12]
 8000a0a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	60da      	str	r2, [r3, #12]

	//Enable TX RX according to the USART_MODE configuration item
	USARTx->CR1 |= UART_Config->USART_MODE;
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	68db      	ldr	r3, [r3, #12]
 8000a16:	683a      	ldr	r2, [r7, #0]
 8000a18:	7812      	ldrb	r2, [r2, #0]
 8000a1a:	431a      	orrs	r2, r3
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	60da      	str	r2, [r3, #12]

	//PayLoad Length
	USARTx->CR1 |=UART_Config->PayLoad_Length;
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	68db      	ldr	r3, [r3, #12]
 8000a24:	683a      	ldr	r2, [r7, #0]
 8000a26:	7a12      	ldrb	r2, [r2, #8]
 8000a28:	431a      	orrs	r2, r3
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	60da      	str	r2, [r3, #12]

	//Baud Rate
	USARTx->CR1 |=UART_Config->BaudRate;
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	68da      	ldr	r2, [r3, #12]
 8000a32:	683b      	ldr	r3, [r7, #0]
 8000a34:	685b      	ldr	r3, [r3, #4]
 8000a36:	431a      	orrs	r2, r3
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	60da      	str	r2, [r3, #12]

	//Parity
	USARTx->CR1 |=UART_Config->Parity;
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	68db      	ldr	r3, [r3, #12]
 8000a40:	683a      	ldr	r2, [r7, #0]
 8000a42:	7a52      	ldrb	r2, [r2, #9]
 8000a44:	431a      	orrs	r2, r3
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	60da      	str	r2, [r3, #12]

	//StopBits
	USARTx->CR1 |=UART_Config->StopBits;
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	68db      	ldr	r3, [r3, #12]
 8000a4e:	683a      	ldr	r2, [r7, #0]
 8000a50:	7a92      	ldrb	r2, [r2, #10]
 8000a52:	431a      	orrs	r2, r3
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	60da      	str	r2, [r3, #12]

	//HW_FlowCtrl
	USARTx->CR1 |=UART_Config->HW_FlowCtrl;
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	68db      	ldr	r3, [r3, #12]
 8000a5c:	683a      	ldr	r2, [r7, #0]
 8000a5e:	7ad2      	ldrb	r2, [r2, #11]
 8000a60:	431a      	orrs	r2, r3
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	60da      	str	r2, [r3, #12]

	//IRQ_Enable
	USARTx->CR1 |=UART_Config->IRQ_Enable;
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	68db      	ldr	r3, [r3, #12]
 8000a6a:	683a      	ldr	r2, [r7, #0]
 8000a6c:	7b12      	ldrb	r2, [r2, #12]
 8000a6e:	431a      	orrs	r2, r3
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	60da      	str	r2, [r3, #12]

	/*Configuration of BRR(BaudRate Register)*/
	//PCLK1 for USART2,3
	//PCLK2 for USART1
	if(USARTx == USART1)
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	4a30      	ldr	r2, [pc, #192]	; (8000b38 <MCAL_UART_INIT+0x1b0>)
 8000a78:	4293      	cmp	r3, r2
 8000a7a:	d103      	bne.n	8000a84 <MCAL_UART_INIT+0xfc>
	{
		pclk=MCAL_RCC_Get_PCLK2_Freq();
 8000a7c:	f000 fb86 	bl	800118c <MCAL_RCC_Get_PCLK2_Freq>
 8000a80:	60f8      	str	r0, [r7, #12]
 8000a82:	e002      	b.n	8000a8a <MCAL_UART_INIT+0x102>
	}
	else
	{
		pclk=MCAL_RCC_Get_PCLK1_Freq();
 8000a84:	f000 fb6e 	bl	8001164 <MCAL_RCC_Get_PCLK1_Freq>
 8000a88:	60f8      	str	r0, [r7, #12]
	}

	BRR = USART_BRR_REGISTER(pclk,UART_Config->BaudRate);
 8000a8a:	683b      	ldr	r3, [r7, #0]
 8000a8c:	685b      	ldr	r3, [r3, #4]
 8000a8e:	011b      	lsls	r3, r3, #4
 8000a90:	68fa      	ldr	r2, [r7, #12]
 8000a92:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a96:	0119      	lsls	r1, r3, #4
 8000a98:	68fa      	ldr	r2, [r7, #12]
 8000a9a:	4613      	mov	r3, r2
 8000a9c:	009b      	lsls	r3, r3, #2
 8000a9e:	4413      	add	r3, r2
 8000aa0:	009a      	lsls	r2, r3, #2
 8000aa2:	441a      	add	r2, r3
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	685b      	ldr	r3, [r3, #4]
 8000aa8:	009b      	lsls	r3, r3, #2
 8000aaa:	fbb2 f2f3 	udiv	r2, r2, r3
 8000aae:	683b      	ldr	r3, [r7, #0]
 8000ab0:	685b      	ldr	r3, [r3, #4]
 8000ab2:	011b      	lsls	r3, r3, #4
 8000ab4:	68f8      	ldr	r0, [r7, #12]
 8000ab6:	fbb0 f3f3 	udiv	r3, r0, r3
 8000aba:	2064      	movs	r0, #100	; 0x64
 8000abc:	fb00 f303 	mul.w	r3, r0, r3
 8000ac0:	1ad3      	subs	r3, r2, r3
 8000ac2:	011b      	lsls	r3, r3, #4
 8000ac4:	4a21      	ldr	r2, [pc, #132]	; (8000b4c <MCAL_UART_INIT+0x1c4>)
 8000ac6:	fba2 2303 	umull	r2, r3, r2, r3
 8000aca:	095b      	lsrs	r3, r3, #5
 8000acc:	f003 030f 	and.w	r3, r3, #15
 8000ad0:	430b      	orrs	r3, r1
 8000ad2:	60bb      	str	r3, [r7, #8]
	USARTx->BRR = BRR;
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	68ba      	ldr	r2, [r7, #8]
 8000ad8:	609a      	str	r2, [r3, #8]

	/*Enable/Disable interrupt*/
	//USART_CR1
	if( UART_Config->IRQ_Enable != USART_IRQ_Enable_NONE ) //this mean user enable interrupt
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	7b1b      	ldrb	r3, [r3, #12]
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d026      	beq.n	8000b30 <MCAL_UART_INIT+0x1a8>
	{
		USARTx->CR1 |= UART_Config->IRQ_Enable;
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	68db      	ldr	r3, [r3, #12]
 8000ae6:	683a      	ldr	r2, [r7, #0]
 8000ae8:	7b12      	ldrb	r2, [r2, #12]
 8000aea:	431a      	orrs	r2, r3
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	60da      	str	r2, [r3, #12]

		//Enable interrupt for NVIC for USARTx IRQ
		if(USARTx == USART1)
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	4a11      	ldr	r2, [pc, #68]	; (8000b38 <MCAL_UART_INIT+0x1b0>)
 8000af4:	4293      	cmp	r3, r2
 8000af6:	d106      	bne.n	8000b06 <MCAL_UART_INIT+0x17e>
		{
			NVIC_IRQ37_USART1_ENABLE();
 8000af8:	4b15      	ldr	r3, [pc, #84]	; (8000b50 <MCAL_UART_INIT+0x1c8>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	4a14      	ldr	r2, [pc, #80]	; (8000b50 <MCAL_UART_INIT+0x1c8>)
 8000afe:	f043 0320 	orr.w	r3, r3, #32
 8000b02:	6013      	str	r3, [r2, #0]
			NVIC_IRQ39_USART3_ENABLE();
		}

	}

}
 8000b04:	e014      	b.n	8000b30 <MCAL_UART_INIT+0x1a8>
		else if(USARTx == USART2)
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	4a0e      	ldr	r2, [pc, #56]	; (8000b44 <MCAL_UART_INIT+0x1bc>)
 8000b0a:	4293      	cmp	r3, r2
 8000b0c:	d106      	bne.n	8000b1c <MCAL_UART_INIT+0x194>
			NVIC_IRQ38_USART2_ENABLE();
 8000b0e:	4b10      	ldr	r3, [pc, #64]	; (8000b50 <MCAL_UART_INIT+0x1c8>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	4a0f      	ldr	r2, [pc, #60]	; (8000b50 <MCAL_UART_INIT+0x1c8>)
 8000b14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b18:	6013      	str	r3, [r2, #0]
}
 8000b1a:	e009      	b.n	8000b30 <MCAL_UART_INIT+0x1a8>
		else if(USARTx == USART3)
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	4a0a      	ldr	r2, [pc, #40]	; (8000b48 <MCAL_UART_INIT+0x1c0>)
 8000b20:	4293      	cmp	r3, r2
 8000b22:	d105      	bne.n	8000b30 <MCAL_UART_INIT+0x1a8>
			NVIC_IRQ39_USART3_ENABLE();
 8000b24:	4b0a      	ldr	r3, [pc, #40]	; (8000b50 <MCAL_UART_INIT+0x1c8>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	4a09      	ldr	r2, [pc, #36]	; (8000b50 <MCAL_UART_INIT+0x1c8>)
 8000b2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b2e:	6013      	str	r3, [r2, #0]
}
 8000b30:	bf00      	nop
 8000b32:	3710      	adds	r7, #16
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bdb0      	pop	{r4, r5, r7, pc}
 8000b38:	40013800 	.word	0x40013800
 8000b3c:	40021000 	.word	0x40021000
 8000b40:	20000088 	.word	0x20000088
 8000b44:	40004400 	.word	0x40004400
 8000b48:	40004800 	.word	0x40004800
 8000b4c:	51eb851f 	.word	0x51eb851f
 8000b50:	e000e104 	.word	0xe000e104

08000b54 <Which_UART>:
}

/*
 * This functions is used by uart driver to get the index of the global array for the used instance
 * */
static uint8_t Which_UART(USART_TypeDef* USARTx){
 8000b54:	b480      	push	{r7}
 8000b56:	b083      	sub	sp, #12
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
	if(USARTx == USART1)
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	4a0b      	ldr	r2, [pc, #44]	; (8000b8c <Which_UART+0x38>)
 8000b60:	4293      	cmp	r3, r2
 8000b62:	d101      	bne.n	8000b68 <Which_UART+0x14>
	{
		return 0;
 8000b64:	2300      	movs	r3, #0
 8000b66:	e00c      	b.n	8000b82 <Which_UART+0x2e>
	}
	else if(USARTx == USART2)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	4a09      	ldr	r2, [pc, #36]	; (8000b90 <Which_UART+0x3c>)
 8000b6c:	4293      	cmp	r3, r2
 8000b6e:	d101      	bne.n	8000b74 <Which_UART+0x20>
	{
		return 1;
 8000b70:	2301      	movs	r3, #1
 8000b72:	e006      	b.n	8000b82 <Which_UART+0x2e>
	}
	else if(USARTx == USART3)
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	4a07      	ldr	r2, [pc, #28]	; (8000b94 <Which_UART+0x40>)
 8000b78:	4293      	cmp	r3, r2
 8000b7a:	d101      	bne.n	8000b80 <Which_UART+0x2c>
	{
		return 3;
 8000b7c:	2303      	movs	r3, #3
 8000b7e:	e000      	b.n	8000b82 <Which_UART+0x2e>
	}
	return 4;		//will cause error for user when he uses wrong address for USARTx
 8000b80:	2304      	movs	r3, #4
}
 8000b82:	4618      	mov	r0, r3
 8000b84:	370c      	adds	r7, #12
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bc80      	pop	{r7}
 8000b8a:	4770      	bx	lr
 8000b8c:	40013800 	.word	0x40013800
 8000b90:	40004400 	.word	0x40004400
 8000b94:	40004800 	.word	0x40004800

08000b98 <MCAL_UART_SEND_DATA>:
void MCAL_UART_SEND_DATA(USART_TypeDef* USARTx,uint16_t* pTXBuffer,enum PoLLing_Mechnism PollengEn)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b086      	sub	sp, #24
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	60f8      	str	r0, [r7, #12]
 8000ba0:	60b9      	str	r1, [r7, #8]
 8000ba2:	4613      	mov	r3, r2
 8000ba4:	71fb      	strb	r3, [r7, #7]

	//Wait until TXE flag is set in SR
	if(PollengEn == enable)
 8000ba6:	79fb      	ldrb	r3, [r7, #7]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d106      	bne.n	8000bba <MCAL_UART_SEND_DATA+0x22>
		while(! (USARTx->SR & (1<<7)) );
 8000bac:	bf00      	nop
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d0f9      	beq.n	8000bae <MCAL_UART_SEND_DATA+0x16>

	uint8_t Gindex=Which_UART(USARTx);
 8000bba:	68f8      	ldr	r0, [r7, #12]
 8000bbc:	f7ff ffca 	bl	8000b54 <Which_UART>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	75fb      	strb	r3, [r7, #23]
		USARTx->DR = (*pTXBuffer & (uint16_t)0x01FF);
	}
	else
	{
		//If 8Bit
		USARTx->DR = (*pTXBuffer & (uint8_t)0xFF);
 8000bc4:	68bb      	ldr	r3, [r7, #8]
 8000bc6:	881b      	ldrh	r3, [r3, #0]
 8000bc8:	b2da      	uxtb	r2, r3
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	605a      	str	r2, [r3, #4]
	}



}
 8000bce:	bf00      	nop
 8000bd0:	3718      	adds	r7, #24
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
	...

08000bd8 <MCAL_UART_RECEIVE_DATA>:


void MCAL_UART_RECEIVE_DATA(USART_TypeDef* USARTx,uint16_t* pTXBuffer,enum PoLLing_Mechnism PollengEn)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b086      	sub	sp, #24
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	60f8      	str	r0, [r7, #12]
 8000be0:	60b9      	str	r1, [r7, #8]
 8000be2:	4613      	mov	r3, r2
 8000be4:	71fb      	strb	r3, [r7, #7]

	//wait till RXNE flag is set in the SR
	while(! (USARTx->SR & (1<<5)) );
 8000be6:	bf00      	nop
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	f003 0320 	and.w	r3, r3, #32
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d0f9      	beq.n	8000be8 <MCAL_UART_RECEIVE_DATA+0x10>

	//check the USART_PayLoad_Length (9B or 8B)
	uint8_t Gindex=Which_UART(USARTx);
 8000bf4:	68f8      	ldr	r0, [r7, #12]
 8000bf6:	f7ff ffad 	bl	8000b54 <Which_UART>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	75fb      	strb	r3, [r7, #23]

	}
	else //8Bit
	{
		//8Bit & no parity
		if(Global_UART_Config[Gindex].Parity == USART_Parity_NONE)
 8000bfe:	7dfa      	ldrb	r2, [r7, #23]
 8000c00:	490e      	ldr	r1, [pc, #56]	; (8000c3c <MCAL_UART_RECEIVE_DATA+0x64>)
 8000c02:	4613      	mov	r3, r2
 8000c04:	009b      	lsls	r3, r3, #2
 8000c06:	4413      	add	r3, r2
 8000c08:	009b      	lsls	r3, r3, #2
 8000c0a:	440b      	add	r3, r1
 8000c0c:	3309      	adds	r3, #9
 8000c0e:	781b      	ldrb	r3, [r3, #0]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d107      	bne.n	8000c24 <MCAL_UART_RECEIVE_DATA+0x4c>
		{
			//no parity so all 8bit consider as data
			*((uint16_t*) pTXBuffer) = (USARTx->DR & (uint8_t)0xFF) ;
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	685b      	ldr	r3, [r3, #4]
 8000c18:	b29b      	uxth	r3, r3
 8000c1a:	b2db      	uxtb	r3, r3
 8000c1c:	b29a      	uxth	r2, r3
 8000c1e:	68bb      	ldr	r3, [r7, #8]
 8000c20:	801a      	strh	r2, [r3, #0]
			*((uint16_t*)pTXBuffer) = (USARTx->DR & (uint8_t)0x7F);
		}
	}


}
 8000c22:	e007      	b.n	8000c34 <MCAL_UART_RECEIVE_DATA+0x5c>
			*((uint16_t*)pTXBuffer) = (USARTx->DR & (uint8_t)0x7F);
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	685b      	ldr	r3, [r3, #4]
 8000c28:	b29b      	uxth	r3, r3
 8000c2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000c2e:	b29a      	uxth	r2, r3
 8000c30:	68bb      	ldr	r3, [r7, #8]
 8000c32:	801a      	strh	r2, [r3, #0]
}
 8000c34:	bf00      	nop
 8000c36:	3718      	adds	r7, #24
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	20000088 	.word	0x20000088

08000c40 <MCAL_UART_GPIO_Set_Pins>:

void MCAL_UART_GPIO_Set_Pins(USART_TypeDef* USARTx)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b084      	sub	sp, #16
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
	GPIO_Pin_Configure_t PinCfg;
	if( USARTx == USART1 )
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	4a67      	ldr	r2, [pc, #412]	; (8000de8 <MCAL_UART_GPIO_Set_Pins+0x1a8>)
 8000c4c:	4293      	cmp	r3, r2
 8000c4e:	d13f      	bne.n	8000cd0 <MCAL_UART_GPIO_Set_Pins+0x90>
		 * PA11 ->CTS
		 * PA12 ->RTS
		 */

		//TX
		PinCfg.GPIO_Pin_Number=GPIO_PIN_9;
 8000c50:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c54:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE=GPIO_MODE_OUTPUT_AF_PP;
 8000c56:	2306      	movs	r3, #6
 8000c58:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_OUTPUT_SPEED=GPIO_SPEED_10M;
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 8000c5e:	f107 030c 	add.w	r3, r7, #12
 8000c62:	4619      	mov	r1, r3
 8000c64:	4861      	ldr	r0, [pc, #388]	; (8000dec <MCAL_UART_GPIO_Set_Pins+0x1ac>)
 8000c66:	f000 f94c 	bl	8000f02 <MCAL_GPIO_Init>

		//RX
		PinCfg.GPIO_Pin_Number=GPIO_PIN_10;
 8000c6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c6e:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE=GPIO_MODE_AF_INPUT;
 8000c70:	2308      	movs	r3, #8
 8000c72:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 8000c74:	f107 030c 	add.w	r3, r7, #12
 8000c78:	4619      	mov	r1, r3
 8000c7a:	485c      	ldr	r0, [pc, #368]	; (8000dec <MCAL_UART_GPIO_Set_Pins+0x1ac>)
 8000c7c:	f000 f941 	bl	8000f02 <MCAL_GPIO_Init>

		if (Global_UART_Config[0].HW_FlowCtrl == USART_HW_FlowCtrl_CTS 				||
 8000c80:	4b5b      	ldr	r3, [pc, #364]	; (8000df0 <MCAL_UART_GPIO_Set_Pins+0x1b0>)
 8000c82:	7adb      	ldrb	r3, [r3, #11]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d003      	beq.n	8000c90 <MCAL_UART_GPIO_Set_Pins+0x50>
				Global_UART_Config[0].HW_FlowCtrl == USART_HW_FlowCtrl_CTS_AND_RTS 		)
 8000c88:	4b59      	ldr	r3, [pc, #356]	; (8000df0 <MCAL_UART_GPIO_Set_Pins+0x1b0>)
 8000c8a:	7adb      	ldrb	r3, [r3, #11]
		if (Global_UART_Config[0].HW_FlowCtrl == USART_HW_FlowCtrl_CTS 				||
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d10a      	bne.n	8000ca6 <MCAL_UART_GPIO_Set_Pins+0x66>
		{
			PinCfg.GPIO_Pin_Number=GPIO_PIN_11;
 8000c90:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000c94:	81bb      	strh	r3, [r7, #12]
			PinCfg.GPIO_MODE=GPIO_MODE_INPUT_FLO;
 8000c96:	2301      	movs	r3, #1
 8000c98:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOA, &PinCfg);
 8000c9a:	f107 030c 	add.w	r3, r7, #12
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	4852      	ldr	r0, [pc, #328]	; (8000dec <MCAL_UART_GPIO_Set_Pins+0x1ac>)
 8000ca2:	f000 f92e 	bl	8000f02 <MCAL_GPIO_Init>
		}

		if (Global_UART_Config[0].HW_FlowCtrl == USART_HW_FlowCtrl_RTS 				||
 8000ca6:	4b52      	ldr	r3, [pc, #328]	; (8000df0 <MCAL_UART_GPIO_Set_Pins+0x1b0>)
 8000ca8:	7adb      	ldrb	r3, [r3, #11]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d003      	beq.n	8000cb6 <MCAL_UART_GPIO_Set_Pins+0x76>
				Global_UART_Config[0].HW_FlowCtrl == USART_HW_FlowCtrl_CTS_AND_RTS 		)
 8000cae:	4b50      	ldr	r3, [pc, #320]	; (8000df0 <MCAL_UART_GPIO_Set_Pins+0x1b0>)
 8000cb0:	7adb      	ldrb	r3, [r3, #11]
		if (Global_UART_Config[0].HW_FlowCtrl == USART_HW_FlowCtrl_RTS 				||
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d10c      	bne.n	8000cd0 <MCAL_UART_GPIO_Set_Pins+0x90>
		{
			PinCfg.GPIO_Pin_Number=GPIO_PIN_12;
 8000cb6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cba:	81bb      	strh	r3, [r7, #12]
			PinCfg.GPIO_MODE=GPIO_MODE_OUTPUT_AF_PP;
 8000cbc:	2306      	movs	r3, #6
 8000cbe:	73bb      	strb	r3, [r7, #14]
			PinCfg.GPIO_OUTPUT_SPEED=GPIO_SPEED_10M;
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOA, &PinCfg);
 8000cc4:	f107 030c 	add.w	r3, r7, #12
 8000cc8:	4619      	mov	r1, r3
 8000cca:	4848      	ldr	r0, [pc, #288]	; (8000dec <MCAL_UART_GPIO_Set_Pins+0x1ac>)
 8000ccc:	f000 f919 	bl	8000f02 <MCAL_GPIO_Init>
		}

	}
	if( USARTx == USART2 )
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	4a48      	ldr	r2, [pc, #288]	; (8000df4 <MCAL_UART_GPIO_Set_Pins+0x1b4>)
 8000cd4:	4293      	cmp	r3, r2
 8000cd6:	d13b      	bne.n	8000d50 <MCAL_UART_GPIO_Set_Pins+0x110>
		 * PA0 ->CTS
		 * PA1 ->RTS
		 */

		//TX
		PinCfg.GPIO_Pin_Number=GPIO_PIN_2;
 8000cd8:	2304      	movs	r3, #4
 8000cda:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE=GPIO_MODE_OUTPUT_AF_PP;
 8000cdc:	2306      	movs	r3, #6
 8000cde:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_OUTPUT_SPEED=GPIO_SPEED_10M;
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 8000ce4:	f107 030c 	add.w	r3, r7, #12
 8000ce8:	4619      	mov	r1, r3
 8000cea:	4840      	ldr	r0, [pc, #256]	; (8000dec <MCAL_UART_GPIO_Set_Pins+0x1ac>)
 8000cec:	f000 f909 	bl	8000f02 <MCAL_GPIO_Init>

		//RX
		PinCfg.GPIO_Pin_Number=GPIO_PIN_3;
 8000cf0:	2308      	movs	r3, #8
 8000cf2:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE=GPIO_MODE_AF_INPUT;
 8000cf4:	2308      	movs	r3, #8
 8000cf6:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 8000cf8:	f107 030c 	add.w	r3, r7, #12
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	483b      	ldr	r0, [pc, #236]	; (8000dec <MCAL_UART_GPIO_Set_Pins+0x1ac>)
 8000d00:	f000 f8ff 	bl	8000f02 <MCAL_GPIO_Init>

		if (Global_UART_Config[1].HW_FlowCtrl == USART_HW_FlowCtrl_CTS 					||
 8000d04:	4b3a      	ldr	r3, [pc, #232]	; (8000df0 <MCAL_UART_GPIO_Set_Pins+0x1b0>)
 8000d06:	7fdb      	ldrb	r3, [r3, #31]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d003      	beq.n	8000d14 <MCAL_UART_GPIO_Set_Pins+0xd4>
				Global_UART_Config[1].HW_FlowCtrl == USART_HW_FlowCtrl_CTS_AND_RTS 			)
 8000d0c:	4b38      	ldr	r3, [pc, #224]	; (8000df0 <MCAL_UART_GPIO_Set_Pins+0x1b0>)
 8000d0e:	7fdb      	ldrb	r3, [r3, #31]
		if (Global_UART_Config[1].HW_FlowCtrl == USART_HW_FlowCtrl_CTS 					||
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d109      	bne.n	8000d28 <MCAL_UART_GPIO_Set_Pins+0xe8>
		{
			PinCfg.GPIO_Pin_Number=GPIO_PIN_0;
 8000d14:	2301      	movs	r3, #1
 8000d16:	81bb      	strh	r3, [r7, #12]
			PinCfg.GPIO_MODE=GPIO_MODE_INPUT_FLO;
 8000d18:	2301      	movs	r3, #1
 8000d1a:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOA, &PinCfg);
 8000d1c:	f107 030c 	add.w	r3, r7, #12
 8000d20:	4619      	mov	r1, r3
 8000d22:	4832      	ldr	r0, [pc, #200]	; (8000dec <MCAL_UART_GPIO_Set_Pins+0x1ac>)
 8000d24:	f000 f8ed 	bl	8000f02 <MCAL_GPIO_Init>
		}

		if (Global_UART_Config[1].HW_FlowCtrl == USART_HW_FlowCtrl_RTS 					||
 8000d28:	4b31      	ldr	r3, [pc, #196]	; (8000df0 <MCAL_UART_GPIO_Set_Pins+0x1b0>)
 8000d2a:	7fdb      	ldrb	r3, [r3, #31]
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d003      	beq.n	8000d38 <MCAL_UART_GPIO_Set_Pins+0xf8>
				Global_UART_Config[1].HW_FlowCtrl == USART_HW_FlowCtrl_CTS_AND_RTS 		)
 8000d30:	4b2f      	ldr	r3, [pc, #188]	; (8000df0 <MCAL_UART_GPIO_Set_Pins+0x1b0>)
 8000d32:	7fdb      	ldrb	r3, [r3, #31]
		if (Global_UART_Config[1].HW_FlowCtrl == USART_HW_FlowCtrl_RTS 					||
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d10b      	bne.n	8000d50 <MCAL_UART_GPIO_Set_Pins+0x110>
		{
			PinCfg.GPIO_Pin_Number=GPIO_PIN_1;
 8000d38:	2302      	movs	r3, #2
 8000d3a:	81bb      	strh	r3, [r7, #12]
			PinCfg.GPIO_MODE=GPIO_MODE_OUTPUT_AF_PP;
 8000d3c:	2306      	movs	r3, #6
 8000d3e:	73bb      	strb	r3, [r7, #14]
			PinCfg.GPIO_OUTPUT_SPEED=GPIO_SPEED_10M;
 8000d40:	2301      	movs	r3, #1
 8000d42:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOA, &PinCfg);
 8000d44:	f107 030c 	add.w	r3, r7, #12
 8000d48:	4619      	mov	r1, r3
 8000d4a:	4828      	ldr	r0, [pc, #160]	; (8000dec <MCAL_UART_GPIO_Set_Pins+0x1ac>)
 8000d4c:	f000 f8d9 	bl	8000f02 <MCAL_GPIO_Init>
		}

	}
	if( USARTx == USART3 )
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	4a29      	ldr	r2, [pc, #164]	; (8000df8 <MCAL_UART_GPIO_Set_Pins+0x1b8>)
 8000d54:	4293      	cmp	r3, r2
 8000d56:	d143      	bne.n	8000de0 <MCAL_UART_GPIO_Set_Pins+0x1a0>
		 * PB13 ->CTS
		 * PB14 ->RTS
		 */

		//TX
		PinCfg.GPIO_Pin_Number=GPIO_PIN_10;
 8000d58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d5c:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE=GPIO_MODE_OUTPUT_AF_PP;
 8000d5e:	2306      	movs	r3, #6
 8000d60:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_OUTPUT_SPEED=GPIO_SPEED_10M;
 8000d62:	2301      	movs	r3, #1
 8000d64:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOB, &PinCfg);
 8000d66:	f107 030c 	add.w	r3, r7, #12
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	4823      	ldr	r0, [pc, #140]	; (8000dfc <MCAL_UART_GPIO_Set_Pins+0x1bc>)
 8000d6e:	f000 f8c8 	bl	8000f02 <MCAL_GPIO_Init>

		//RX
		PinCfg.GPIO_Pin_Number=GPIO_PIN_11;
 8000d72:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000d76:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE=GPIO_MODE_AF_INPUT;
 8000d78:	2308      	movs	r3, #8
 8000d7a:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOB, &PinCfg);
 8000d7c:	f107 030c 	add.w	r3, r7, #12
 8000d80:	4619      	mov	r1, r3
 8000d82:	481e      	ldr	r0, [pc, #120]	; (8000dfc <MCAL_UART_GPIO_Set_Pins+0x1bc>)
 8000d84:	f000 f8bd 	bl	8000f02 <MCAL_GPIO_Init>


		if (Global_UART_Config[2].HW_FlowCtrl == USART_HW_FlowCtrl_CTS 					||
 8000d88:	4b19      	ldr	r3, [pc, #100]	; (8000df0 <MCAL_UART_GPIO_Set_Pins+0x1b0>)
 8000d8a:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d004      	beq.n	8000d9c <MCAL_UART_GPIO_Set_Pins+0x15c>
				Global_UART_Config[2].HW_FlowCtrl == USART_HW_FlowCtrl_CTS_AND_RTS 		)
 8000d92:	4b17      	ldr	r3, [pc, #92]	; (8000df0 <MCAL_UART_GPIO_Set_Pins+0x1b0>)
 8000d94:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
		if (Global_UART_Config[2].HW_FlowCtrl == USART_HW_FlowCtrl_CTS 					||
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d10a      	bne.n	8000db2 <MCAL_UART_GPIO_Set_Pins+0x172>
		{
			PinCfg.GPIO_Pin_Number=GPIO_PIN_13;
 8000d9c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000da0:	81bb      	strh	r3, [r7, #12]
			PinCfg.GPIO_MODE =GPIO_MODE_INPUT_FLO;
 8000da2:	2301      	movs	r3, #1
 8000da4:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOB, &PinCfg);
 8000da6:	f107 030c 	add.w	r3, r7, #12
 8000daa:	4619      	mov	r1, r3
 8000dac:	4813      	ldr	r0, [pc, #76]	; (8000dfc <MCAL_UART_GPIO_Set_Pins+0x1bc>)
 8000dae:	f000 f8a8 	bl	8000f02 <MCAL_GPIO_Init>
		}

		if (Global_UART_Config[2].HW_FlowCtrl == USART_HW_FlowCtrl_RTS 					||
 8000db2:	4b0f      	ldr	r3, [pc, #60]	; (8000df0 <MCAL_UART_GPIO_Set_Pins+0x1b0>)
 8000db4:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d004      	beq.n	8000dc6 <MCAL_UART_GPIO_Set_Pins+0x186>
			Global_UART_Config[2].HW_FlowCtrl == USART_HW_FlowCtrl_CTS_AND_RTS 			)
 8000dbc:	4b0c      	ldr	r3, [pc, #48]	; (8000df0 <MCAL_UART_GPIO_Set_Pins+0x1b0>)
 8000dbe:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
		if (Global_UART_Config[2].HW_FlowCtrl == USART_HW_FlowCtrl_RTS 					||
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d10c      	bne.n	8000de0 <MCAL_UART_GPIO_Set_Pins+0x1a0>
		{
			PinCfg.GPIO_Pin_Number=GPIO_PIN_14;
 8000dc6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000dca:	81bb      	strh	r3, [r7, #12]
			PinCfg.GPIO_MODE=GPIO_MODE_OUTPUT_AF_PP;
 8000dcc:	2306      	movs	r3, #6
 8000dce:	73bb      	strb	r3, [r7, #14]
			PinCfg.GPIO_OUTPUT_SPEED=GPIO_SPEED_10M;
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOB, &PinCfg);
 8000dd4:	f107 030c 	add.w	r3, r7, #12
 8000dd8:	4619      	mov	r1, r3
 8000dda:	4808      	ldr	r0, [pc, #32]	; (8000dfc <MCAL_UART_GPIO_Set_Pins+0x1bc>)
 8000ddc:	f000 f891 	bl	8000f02 <MCAL_GPIO_Init>
		}

	}
}
 8000de0:	bf00      	nop
 8000de2:	3710      	adds	r7, #16
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	40013800 	.word	0x40013800
 8000dec:	40010800 	.word	0x40010800
 8000df0:	20000088 	.word	0x20000088
 8000df4:	40004400 	.word	0x40004400
 8000df8:	40004800 	.word	0x40004800
 8000dfc:	40010c00 	.word	0x40010c00

08000e00 <USART1_IRQHandler>:



//ISR
void USART1_IRQHandler(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
	Global_UART_Config[0].P_IRQ_Call_Back ();
 8000e04:	4b02      	ldr	r3, [pc, #8]	; (8000e10 <USART1_IRQHandler+0x10>)
 8000e06:	691b      	ldr	r3, [r3, #16]
 8000e08:	4798      	blx	r3

}
 8000e0a:	bf00      	nop
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	20000088 	.word	0x20000088

08000e14 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0
	Global_UART_Config[1].P_IRQ_Call_Back ();
 8000e18:	4b02      	ldr	r3, [pc, #8]	; (8000e24 <USART2_IRQHandler+0x10>)
 8000e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e1c:	4798      	blx	r3

}
 8000e1e:	bf00      	nop
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	20000088 	.word	0x20000088

08000e28 <USART3_IRQHandler>:

void USART3_IRQHandler(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
	Global_UART_Config[2].P_IRQ_Call_Back ();
 8000e2c:	4b02      	ldr	r3, [pc, #8]	; (8000e38 <USART3_IRQHandler+0x10>)
 8000e2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e30:	4798      	blx	r3

}
 8000e32:	bf00      	nop
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	20000088 	.word	0x20000088

08000e3c <Get_CRLH_Postion>:

#include "STM32F103C6_GPIO_DRIVERS.h"


uint8_t Get_CRLH_Postion(uint16_t PinNumber)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b083      	sub	sp, #12
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	4603      	mov	r3, r0
 8000e44:	80fb      	strh	r3, [r7, #6]
	switch (PinNumber)
 8000e46:	88fb      	ldrh	r3, [r7, #6]
 8000e48:	2b80      	cmp	r3, #128	; 0x80
 8000e4a:	d042      	beq.n	8000ed2 <Get_CRLH_Postion+0x96>
 8000e4c:	2b80      	cmp	r3, #128	; 0x80
 8000e4e:	dc11      	bgt.n	8000e74 <Get_CRLH_Postion+0x38>
 8000e50:	2b08      	cmp	r3, #8
 8000e52:	d036      	beq.n	8000ec2 <Get_CRLH_Postion+0x86>
 8000e54:	2b08      	cmp	r3, #8
 8000e56:	dc06      	bgt.n	8000e66 <Get_CRLH_Postion+0x2a>
 8000e58:	2b02      	cmp	r3, #2
 8000e5a:	d02e      	beq.n	8000eba <Get_CRLH_Postion+0x7e>
 8000e5c:	2b04      	cmp	r3, #4
 8000e5e:	d02e      	beq.n	8000ebe <Get_CRLH_Postion+0x82>
 8000e60:	2b01      	cmp	r3, #1
 8000e62:	d028      	beq.n	8000eb6 <Get_CRLH_Postion+0x7a>
 8000e64:	e047      	b.n	8000ef6 <Get_CRLH_Postion+0xba>
 8000e66:	2b20      	cmp	r3, #32
 8000e68:	d02f      	beq.n	8000eca <Get_CRLH_Postion+0x8e>
 8000e6a:	2b40      	cmp	r3, #64	; 0x40
 8000e6c:	d02f      	beq.n	8000ece <Get_CRLH_Postion+0x92>
 8000e6e:	2b10      	cmp	r3, #16
 8000e70:	d029      	beq.n	8000ec6 <Get_CRLH_Postion+0x8a>
 8000e72:	e040      	b.n	8000ef6 <Get_CRLH_Postion+0xba>
 8000e74:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000e78:	d033      	beq.n	8000ee2 <Get_CRLH_Postion+0xa6>
 8000e7a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000e7e:	dc09      	bgt.n	8000e94 <Get_CRLH_Postion+0x58>
 8000e80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000e84:	d029      	beq.n	8000eda <Get_CRLH_Postion+0x9e>
 8000e86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e8a:	d028      	beq.n	8000ede <Get_CRLH_Postion+0xa2>
 8000e8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000e90:	d021      	beq.n	8000ed6 <Get_CRLH_Postion+0x9a>
 8000e92:	e030      	b.n	8000ef6 <Get_CRLH_Postion+0xba>
 8000e94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000e98:	d027      	beq.n	8000eea <Get_CRLH_Postion+0xae>
 8000e9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000e9e:	dc03      	bgt.n	8000ea8 <Get_CRLH_Postion+0x6c>
 8000ea0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000ea4:	d01f      	beq.n	8000ee6 <Get_CRLH_Postion+0xaa>
 8000ea6:	e026      	b.n	8000ef6 <Get_CRLH_Postion+0xba>
 8000ea8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000eac:	d01f      	beq.n	8000eee <Get_CRLH_Postion+0xb2>
 8000eae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000eb2:	d01e      	beq.n	8000ef2 <Get_CRLH_Postion+0xb6>
 8000eb4:	e01f      	b.n	8000ef6 <Get_CRLH_Postion+0xba>
	{
	case GPIO_PIN_0:
		return 0;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	e01e      	b.n	8000ef8 <Get_CRLH_Postion+0xbc>
		break;

	case GPIO_PIN_1:
		return 4;
 8000eba:	2304      	movs	r3, #4
 8000ebc:	e01c      	b.n	8000ef8 <Get_CRLH_Postion+0xbc>
		break;

	case GPIO_PIN_2:
		return 8;
 8000ebe:	2308      	movs	r3, #8
 8000ec0:	e01a      	b.n	8000ef8 <Get_CRLH_Postion+0xbc>
		break;

	case GPIO_PIN_3:
		return 12;
 8000ec2:	230c      	movs	r3, #12
 8000ec4:	e018      	b.n	8000ef8 <Get_CRLH_Postion+0xbc>
		break;

	case GPIO_PIN_4:
		return 16;
 8000ec6:	2310      	movs	r3, #16
 8000ec8:	e016      	b.n	8000ef8 <Get_CRLH_Postion+0xbc>
		break;

	case GPIO_PIN_5:
		return 20;
 8000eca:	2314      	movs	r3, #20
 8000ecc:	e014      	b.n	8000ef8 <Get_CRLH_Postion+0xbc>
		break;

	case GPIO_PIN_6:
		return 24;
 8000ece:	2318      	movs	r3, #24
 8000ed0:	e012      	b.n	8000ef8 <Get_CRLH_Postion+0xbc>
		break;

	case GPIO_PIN_7:
		return 28;
 8000ed2:	231c      	movs	r3, #28
 8000ed4:	e010      	b.n	8000ef8 <Get_CRLH_Postion+0xbc>
		break;

	case GPIO_PIN_8:
		return 0;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	e00e      	b.n	8000ef8 <Get_CRLH_Postion+0xbc>
		break;

	case GPIO_PIN_9:
		return 4;
 8000eda:	2304      	movs	r3, #4
 8000edc:	e00c      	b.n	8000ef8 <Get_CRLH_Postion+0xbc>
		break;

	case GPIO_PIN_10:
		return 8;
 8000ede:	2308      	movs	r3, #8
 8000ee0:	e00a      	b.n	8000ef8 <Get_CRLH_Postion+0xbc>
		break;

	case GPIO_PIN_11:
		return 12;
 8000ee2:	230c      	movs	r3, #12
 8000ee4:	e008      	b.n	8000ef8 <Get_CRLH_Postion+0xbc>
		break;

	case GPIO_PIN_12:
		return 16;
 8000ee6:	2310      	movs	r3, #16
 8000ee8:	e006      	b.n	8000ef8 <Get_CRLH_Postion+0xbc>
		break;

	case GPIO_PIN_13:
		return 20;
 8000eea:	2314      	movs	r3, #20
 8000eec:	e004      	b.n	8000ef8 <Get_CRLH_Postion+0xbc>
		break;

	case GPIO_PIN_14:
		return 24;
 8000eee:	2318      	movs	r3, #24
 8000ef0:	e002      	b.n	8000ef8 <Get_CRLH_Postion+0xbc>
		break;

	case GPIO_PIN_15:
		return 28;
 8000ef2:	231c      	movs	r3, #28
 8000ef4:	e000      	b.n	8000ef8 <Get_CRLH_Postion+0xbc>
		break;
	default:
		return 0;
 8000ef6:	2300      	movs	r3, #0
		break;

	}
}
 8000ef8:	4618      	mov	r0, r3
 8000efa:	370c      	adds	r7, #12
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bc80      	pop	{r7}
 8000f00:	4770      	bx	lr

08000f02 <MCAL_GPIO_Init>:
 * note -                   -stmf103c6 MCU has GPIO A,B,C,D,E Modules
 *                           but LQFP48 Package has only GPIO A,B, Part of C/D exported external pins
 */
/**================================================================= */
void MCAL_GPIO_Init( GPIO_TypeDef *GPIOx , GPIO_Pin_Configure_t *Pin_Config )
{
 8000f02:	b590      	push	{r4, r7, lr}
 8000f04:	b085      	sub	sp, #20
 8000f06:	af00      	add	r7, sp, #0
 8000f08:	6078      	str	r0, [r7, #4]
 8000f0a:	6039      	str	r1, [r7, #0]

	//To Init Any Pins Must Write On Port configuration register low (GPIOx_CRL) 0>>>7
	//Or register low (GPIOx_CRH) 8>>>15
	//We Determine The Position Should Write On It In  configuration register By Determine First Position Pin

	volatile uint32_t *ConfigureRegister = NULL;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	60bb      	str	r3, [r7, #8]
	uint8_t   ConfigurePin=0;     //In This Variable We Store The Configure Pin
 8000f10:	2300      	movs	r3, #0
 8000f12:	73fb      	strb	r3, [r7, #15]

	ConfigureRegister = (Pin_Config->GPIO_Pin_Number < GPIO_PIN_8)? &GPIOx->CRL : &GPIOx->CRH ;
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	881b      	ldrh	r3, [r3, #0]
 8000f18:	2bff      	cmp	r3, #255	; 0xff
 8000f1a:	d801      	bhi.n	8000f20 <MCAL_GPIO_Init+0x1e>
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	e001      	b.n	8000f24 <MCAL_GPIO_Init+0x22>
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	3304      	adds	r3, #4
 8000f24:	60bb      	str	r3, [r7, #8]
	//Clear CNF & MODE
	*(ConfigureRegister) &=~(0xf<<Get_CRLH_Postion(Pin_Config->GPIO_Pin_Number));
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	881b      	ldrh	r3, [r3, #0]
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f7ff ff86 	bl	8000e3c <Get_CRLH_Postion>
 8000f30:	4603      	mov	r3, r0
 8000f32:	461a      	mov	r2, r3
 8000f34:	230f      	movs	r3, #15
 8000f36:	4093      	lsls	r3, r2
 8000f38:	43da      	mvns	r2, r3
 8000f3a:	68bb      	ldr	r3, [r7, #8]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	401a      	ands	r2, r3
 8000f40:	68bb      	ldr	r3, [r7, #8]
 8000f42:	601a      	str	r2, [r3, #0]

	if (Pin_Config->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD || Pin_Config->GPIO_MODE ==GPIO_MODE_OUTPUT_AF_PP || Pin_Config->GPIO_MODE ==GPIO_MODE_OUTPUT_OD || Pin_Config->GPIO_MODE ==GPIO_MODE_OUTPUT_PP)
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	789b      	ldrb	r3, [r3, #2]
 8000f48:	2b07      	cmp	r3, #7
 8000f4a:	d00b      	beq.n	8000f64 <MCAL_GPIO_Init+0x62>
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	789b      	ldrb	r3, [r3, #2]
 8000f50:	2b06      	cmp	r3, #6
 8000f52:	d007      	beq.n	8000f64 <MCAL_GPIO_Init+0x62>
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	789b      	ldrb	r3, [r3, #2]
 8000f58:	2b05      	cmp	r3, #5
 8000f5a:	d003      	beq.n	8000f64 <MCAL_GPIO_Init+0x62>
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	789b      	ldrb	r3, [r3, #2]
 8000f60:	2b04      	cmp	r3, #4
 8000f62:	d10e      	bne.n	8000f82 <MCAL_GPIO_Init+0x80>
	{

		//I sure The User Want Make The Pin As Output & in Case Output Should Configure Mode(Speed) & CNF(State)
		ConfigurePin = ((( (Pin_Config->GPIO_MODE - 4)<<2) |(Pin_Config->GPIO_OUTPUT_SPEED)) & 0x0f); //Shift 2 to Set The CNF Bits
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	789b      	ldrb	r3, [r3, #2]
 8000f68:	3b04      	subs	r3, #4
 8000f6a:	009b      	lsls	r3, r3, #2
 8000f6c:	b25a      	sxtb	r2, r3
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	78db      	ldrb	r3, [r3, #3]
 8000f72:	b25b      	sxtb	r3, r3
 8000f74:	4313      	orrs	r3, r2
 8000f76:	b25b      	sxtb	r3, r3
 8000f78:	b2db      	uxtb	r3, r3
 8000f7a:	f003 030f 	and.w	r3, r3, #15
 8000f7e:	73fb      	strb	r3, [r7, #15]
 8000f80:	e028      	b.n	8000fd4 <MCAL_GPIO_Init+0xd2>

	}

	else  //I sure The User Want Make The Pin As Input & in Case input Should Configure Mode(Speed)=00 & CNF(State)
	{
		if(Pin_Config->GPIO_MODE == GPIO_MODE_INPUT_FLO || GPIO_MODE_Analog)
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	789b      	ldrb	r3, [r3, #2]
 8000f86:	2b01      	cmp	r3, #1
 8000f88:	d107      	bne.n	8000f9a <MCAL_GPIO_Init+0x98>
		{
			ConfigurePin = (( ( (Pin_Config->GPIO_MODE) <<2) | 0x0) & 0x0F);      //Shift 2 to Set The CNF Bits
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	789b      	ldrb	r3, [r3, #2]
 8000f8e:	009b      	lsls	r3, r3, #2
 8000f90:	b2db      	uxtb	r3, r3
 8000f92:	f003 030f 	and.w	r3, r3, #15
 8000f96:	73fb      	strb	r3, [r7, #15]
 8000f98:	e01c      	b.n	8000fd4 <MCAL_GPIO_Init+0xd2>
		}

		else if(Pin_Config->GPIO_MODE == GPIO_MODE_AF_INPUT)
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	789b      	ldrb	r3, [r3, #2]
 8000f9e:	2b08      	cmp	r3, #8
 8000fa0:	d102      	bne.n	8000fa8 <MCAL_GPIO_Init+0xa6>
		{
			ConfigurePin = (( ( (GPIO_MODE_INPUT_FLO) <<2) | 0x0) & 0x0f);      //Shift 2 to Set The CNF Bits
 8000fa2:	2304      	movs	r3, #4
 8000fa4:	73fb      	strb	r3, [r7, #15]
 8000fa6:	e015      	b.n	8000fd4 <MCAL_GPIO_Init+0xd2>
		}
		else  //PullUp Or PullDown
		{
			ConfigurePin = ( (((GPIO_MODE_INPUT_PU)<<2  ) |  0x0) & 0x0f);
 8000fa8:	2308      	movs	r3, #8
 8000faa:	73fb      	strb	r3, [r7, #15]
			// 20. Port bit configuration table
			/*In Case GPIO_MODE_INPUT_PU OR GPIO_MODE_INPUT_PD We Put The Same Value 10 In CNF
			And Go To ODR IF GPIO_MODE_INPUT_PU Put 1 And If GPIO_MODE_INPUT_PD Put In ODR 0 Shifting By Bin Number*/
			if(Pin_Config->GPIO_MODE == GPIO_MODE_INPUT_PU)
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	789b      	ldrb	r3, [r3, #2]
 8000fb0:	2b02      	cmp	r3, #2
 8000fb2:	d107      	bne.n	8000fc4 <MCAL_GPIO_Init+0xc2>
			{
				GPIOx->ODR |=(Pin_Config->GPIO_Pin_Number); //Not Making Shifting because The Pin Number Already Shifted in Header
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	68db      	ldr	r3, [r3, #12]
 8000fb8:	683a      	ldr	r2, [r7, #0]
 8000fba:	8812      	ldrh	r2, [r2, #0]
 8000fbc:	431a      	orrs	r2, r3
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	60da      	str	r2, [r3, #12]
 8000fc2:	e007      	b.n	8000fd4 <MCAL_GPIO_Init+0xd2>
			}
			else //GPIO_MODE_INPUT_PD
			{
				GPIOx->ODR &=~(Pin_Config->GPIO_Pin_Number);//Not Making Shifting because The Pin Number Already Shifted in Header
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	68db      	ldr	r3, [r3, #12]
 8000fc8:	683a      	ldr	r2, [r7, #0]
 8000fca:	8812      	ldrh	r2, [r2, #0]
 8000fcc:	43d2      	mvns	r2, r2
 8000fce:	401a      	ands	r2, r3
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	60da      	str	r2, [r3, #12]
			}
		}
	}
	//Write On CRH Or CLH
	*(ConfigureRegister) |=( ConfigurePin << Get_CRLH_Postion(Pin_Config->GPIO_Pin_Number) );
 8000fd4:	7bfc      	ldrb	r4, [r7, #15]
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	881b      	ldrh	r3, [r3, #0]
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f7ff ff2e 	bl	8000e3c <Get_CRLH_Postion>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	fa04 f203 	lsl.w	r2, r4, r3
 8000fe6:	68bb      	ldr	r3, [r7, #8]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	431a      	orrs	r2, r3
 8000fec:	68bb      	ldr	r3, [r7, #8]
 8000fee:	601a      	str	r2, [r3, #0]
}
 8000ff0:	bf00      	nop
 8000ff2:	3714      	adds	r7, #20
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd90      	pop	{r4, r7, pc}

08000ff8 <MCAL_GPIO_Read_Pin>:
 * @retval -                -the input pin value (tow values based on @ref GPIO_PIN_State)
 * note -                   -none
 */
/**================================================================= */
uint8_t MCAL_GPIO_Read_Pin( GPIO_TypeDef *GPIOx , uint16_t Pin_Number )
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b085      	sub	sp, #20
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
 8001000:	460b      	mov	r3, r1
 8001002:	807b      	strh	r3, [r7, #2]

	uint8_t PinState =0;
 8001004:	2300      	movs	r3, #0
 8001006:	73fb      	strb	r3, [r7, #15]
	if( (GPIOx->IDR & Pin_Number) != (uint32_t)GPIO_PIN_FALSE )
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	689a      	ldr	r2, [r3, #8]
 800100c:	887b      	ldrh	r3, [r7, #2]
 800100e:	4013      	ands	r3, r2
 8001010:	2b00      	cmp	r3, #0
 8001012:	d002      	beq.n	800101a <MCAL_GPIO_Read_Pin+0x22>
	{
		PinState = GPIO_PIN_TRUE;
 8001014:	2301      	movs	r3, #1
 8001016:	73fb      	strb	r3, [r7, #15]
 8001018:	e001      	b.n	800101e <MCAL_GPIO_Read_Pin+0x26>
	}
	else
	{
		PinState = GPIO_PIN_FALSE;
 800101a:	2300      	movs	r3, #0
 800101c:	73fb      	strb	r3, [r7, #15]
	}
	return PinState;
 800101e:	7bfb      	ldrb	r3, [r7, #15]

}
 8001020:	4618      	mov	r0, r3
 8001022:	3714      	adds	r7, #20
 8001024:	46bd      	mov	sp, r7
 8001026:	bc80      	pop	{r7}
 8001028:	4770      	bx	lr

0800102a <MCAL_GPIO_ReadPort>:
 * @retval -                -the input pin value (tow values based on @ref GPIO_PIN_State)
 * note -                   -none
 */
/**================================================================= */
uint16_t MCAL_GPIO_ReadPort( GPIO_TypeDef *GPIOx )
{
 800102a:	b480      	push	{r7}
 800102c:	b085      	sub	sp, #20
 800102e:	af00      	add	r7, sp, #0
 8001030:	6078      	str	r0, [r7, #4]

	uint16_t PortState =0;
 8001032:	2300      	movs	r3, #0
 8001034:	81fb      	strh	r3, [r7, #14]
	PortState = (uint16_t)GPIOx->IDR;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	689b      	ldr	r3, [r3, #8]
 800103a:	81fb      	strh	r3, [r7, #14]
	return PortState;
 800103c:	89fb      	ldrh	r3, [r7, #14]

}
 800103e:	4618      	mov	r0, r3
 8001040:	3714      	adds	r7, #20
 8001042:	46bd      	mov	sp, r7
 8001044:	bc80      	pop	{r7}
 8001046:	4770      	bx	lr

08001048 <MCAL_GPIO_WritePin>:
 * @retval -                -the input pin value (tow values based on @ref GPIO_PIN_State)
 * note -                   -none
 */
/**================================================================= */
void MCAL_GPIO_WritePin(GPIO_TypeDef *GPIOx , uint16_t Pin_Number , uint8_t Value)
{
 8001048:	b480      	push	{r7}
 800104a:	b083      	sub	sp, #12
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
 8001050:	460b      	mov	r3, r1
 8001052:	807b      	strh	r3, [r7, #2]
 8001054:	4613      	mov	r3, r2
 8001056:	707b      	strb	r3, [r7, #1]
	if(Value != GPIO_PIN_FALSE )
 8001058:	787b      	ldrb	r3, [r7, #1]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d006      	beq.n	800106c <MCAL_GPIO_WritePin+0x24>
	{
		GPIOx->ODR |=(uint32_t) (Pin_Number);
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	68da      	ldr	r2, [r3, #12]
 8001062:	887b      	ldrh	r3, [r7, #2]
 8001064:	431a      	orrs	r2, r3
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	60da      	str	r2, [r3, #12]
	}
	else
	{
		GPIOx->ODR &=~(uint32_t)(Pin_Number);
	}
}
 800106a:	e006      	b.n	800107a <MCAL_GPIO_WritePin+0x32>
		GPIOx->ODR &=~(uint32_t)(Pin_Number);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	68da      	ldr	r2, [r3, #12]
 8001070:	887b      	ldrh	r3, [r7, #2]
 8001072:	43db      	mvns	r3, r3
 8001074:	401a      	ands	r2, r3
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	60da      	str	r2, [r3, #12]
}
 800107a:	bf00      	nop
 800107c:	370c      	adds	r7, #12
 800107e:	46bd      	mov	sp, r7
 8001080:	bc80      	pop	{r7}
 8001082:	4770      	bx	lr

08001084 <MCAL_GPIO_WritePort>:
 * @retval -                -none
 * note -                   -none
 */
/**================================================================= */
void MCAL_GPIO_WritePort(GPIO_TypeDef *GPIOx , uint16_t Value)
{
 8001084:	b480      	push	{r7}
 8001086:	b083      	sub	sp, #12
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
 800108c:	460b      	mov	r3, r1
 800108e:	807b      	strh	r3, [r7, #2]

	GPIOx->ODR = (uint32_t)Value;
 8001090:	887a      	ldrh	r2, [r7, #2]
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	60da      	str	r2, [r3, #12]
}
 8001096:	bf00      	nop
 8001098:	370c      	adds	r7, #12
 800109a:	46bd      	mov	sp, r7
 800109c:	bc80      	pop	{r7}
 800109e:	4770      	bx	lr

080010a0 <MCAL_GPIO_WriteGroup>:
 * @retval -                -none
 * note -                   -none
 */
/**================================================================= */
void MCAL_GPIO_WriteGroup(GPIO_TypeDef * GPIOx,uint16_t Value,uint16_t Mask)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b083      	sub	sp, #12
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
 80010a8:	460b      	mov	r3, r1
 80010aa:	807b      	strh	r3, [r7, #2]
 80010ac:	4613      	mov	r3, r2
 80010ae:	803b      	strh	r3, [r7, #0]
	GPIOx->ODR &= ~(Mask);				// clear the group
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	68db      	ldr	r3, [r3, #12]
 80010b4:	883a      	ldrh	r2, [r7, #0]
 80010b6:	43d2      	mvns	r2, r2
 80010b8:	401a      	ands	r2, r3
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	60da      	str	r2, [r3, #12]
	GPIOx->ODR |= (Value & Mask);		// put the new value
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	68db      	ldr	r3, [r3, #12]
 80010c2:	8879      	ldrh	r1, [r7, #2]
 80010c4:	883a      	ldrh	r2, [r7, #0]
 80010c6:	400a      	ands	r2, r1
 80010c8:	b292      	uxth	r2, r2
 80010ca:	431a      	orrs	r2, r3
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	60da      	str	r2, [r3, #12]
}
 80010d0:	bf00      	nop
 80010d2:	370c      	adds	r7, #12
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bc80      	pop	{r7}
 80010d8:	4770      	bx	lr

080010da <MCAL_GPIO_Toggle_pin>:
 * @retval -                -none
 * note -                   -none
 */
/**================================================================= */
void MCAL_GPIO_Toggle_pin(GPIO_TypeDef *GPIOx , uint16_t PinNumber)
{
 80010da:	b480      	push	{r7}
 80010dc:	b083      	sub	sp, #12
 80010de:	af00      	add	r7, sp, #0
 80010e0:	6078      	str	r0, [r7, #4]
 80010e2:	460b      	mov	r3, r1
 80010e4:	807b      	strh	r3, [r7, #2]
	GPIOx->ODR ^= (PinNumber);
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	68da      	ldr	r2, [r3, #12]
 80010ea:	887b      	ldrh	r3, [r7, #2]
 80010ec:	405a      	eors	r2, r3
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	60da      	str	r2, [r3, #12]
}
 80010f2:	bf00      	nop
 80010f4:	370c      	adds	r7, #12
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bc80      	pop	{r7}
 80010fa:	4770      	bx	lr

080010fc <MCAL_RCC_Get_SYS_CLKFreq>:
	1111: SYSCLK divided by 512*/
const uint8_t AHBPrescTable[16] = {0,0,0,0,0,0,0,0,1,2,3,4,5,6,7,8};


uint32_t MCAL_RCC_Get_SYS_CLKFreq(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
	00: HSI selected as system clock
	01: HSE selected as system clock
	10: PLL selected as system clock
	11: not allowed*/

	switch( (RCC->CFGR >>2) & 0b11 )
 8001100:	4b0b      	ldr	r3, [pc, #44]	; (8001130 <MCAL_RCC_Get_SYS_CLKFreq+0x34>)
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	089b      	lsrs	r3, r3, #2
 8001106:	f003 0303 	and.w	r3, r3, #3
 800110a:	2b01      	cmp	r3, #1
 800110c:	d00a      	beq.n	8001124 <MCAL_RCC_Get_SYS_CLKFreq+0x28>
 800110e:	2b01      	cmp	r3, #1
 8001110:	d302      	bcc.n	8001118 <MCAL_RCC_Get_SYS_CLKFreq+0x1c>
 8001112:	2b0a      	cmp	r3, #10
 8001114:	d002      	beq.n	800111c <MCAL_RCC_Get_SYS_CLKFreq+0x20>
 8001116:	e003      	b.n	8001120 <MCAL_RCC_Get_SYS_CLKFreq+0x24>
	{

	case 00:
		return HSI_RC_CLK;
 8001118:	4b06      	ldr	r3, [pc, #24]	; (8001134 <MCAL_RCC_Get_SYS_CLKFreq+0x38>)
 800111a:	e005      	b.n	8001128 <MCAL_RCC_Get_SYS_CLKFreq+0x2c>
		//return HSE_CLK;
		break;

	case 10:
		//to do calc it HSE PLLCLK & PLLMULL & PLL source Mux
		return 16000000;
 800111c:	4b06      	ldr	r3, [pc, #24]	; (8001138 <MCAL_RCC_Get_SYS_CLKFreq+0x3c>)
 800111e:	e003      	b.n	8001128 <MCAL_RCC_Get_SYS_CLKFreq+0x2c>
		break;

	default:
		return 0;
 8001120:	2300      	movs	r3, #0
 8001122:	e001      	b.n	8001128 <MCAL_RCC_Get_SYS_CLKFreq+0x2c>
		break;
 8001124:	bf00      	nop
		break;

	}
	return 0;
 8001126:	2300      	movs	r3, #0
}
 8001128:	4618      	mov	r0, r3
 800112a:	46bd      	mov	sp, r7
 800112c:	bc80      	pop	{r7}
 800112e:	4770      	bx	lr
 8001130:	40021000 	.word	0x40021000
 8001134:	007a1200 	.word	0x007a1200
 8001138:	00f42400 	.word	0x00f42400

0800113c <MCAL_RCC_Get_HCLK_Freq>:


uint32_t MCAL_RCC_Get_HCLK_Freq(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
	1011: SYSCLK divided by 16
	1100: SYSCLK divided by 64
	1101: SYSCLK divided by 128
	1110: SYSCLK divided by 256
	1111: SYSCLK divided by 512*/
	return MCAL_RCC_Get_SYS_CLKFreq() >> AHBPrescTable[( (RCC->CFGR >> 7) & 0b1111) ];/*(( RCC->CFGR >>8) & 0b1111) This Is
 8001140:	f7ff ffdc 	bl	80010fc <MCAL_RCC_Get_SYS_CLKFreq>
 8001144:	4601      	mov	r1, r0
 8001146:	4b05      	ldr	r3, [pc, #20]	; (800115c <MCAL_RCC_Get_HCLK_Freq+0x20>)
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	09db      	lsrs	r3, r3, #7
 800114c:	f003 030f 	and.w	r3, r3, #15
 8001150:	4a03      	ldr	r2, [pc, #12]	; (8001160 <MCAL_RCC_Get_HCLK_Freq+0x24>)
 8001152:	5cd3      	ldrb	r3, [r2, r3]
 8001154:	fa21 f303 	lsr.w	r3, r1, r3
	                                                      Read Value of AHB  prescaler To Determine index On 2d Upper Array */


}
 8001158:	4618      	mov	r0, r3
 800115a:	bd80      	pop	{r7, pc}
 800115c:	40021000 	.word	0x40021000
 8001160:	08001b3c 	.word	0x08001b3c

08001164 <MCAL_RCC_Get_PCLK1_Freq>:



uint32_t MCAL_RCC_Get_PCLK1_Freq(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
	100: HCLK divided by 2
	101: HCLK divided by 4
	110: HCLK divided by 8
	111: HCLK divided by 16*/

	return ( MCAL_RCC_Get_HCLK_Freq() >> APBPrescTable[ (( RCC->CFGR >>8) & 0b111) ] ); /*(( RCC->CFGR >>8) & 0b111) This Is
 8001168:	f7ff ffe8 	bl	800113c <MCAL_RCC_Get_HCLK_Freq>
 800116c:	4601      	mov	r1, r0
 800116e:	4b05      	ldr	r3, [pc, #20]	; (8001184 <MCAL_RCC_Get_PCLK1_Freq+0x20>)
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	0a1b      	lsrs	r3, r3, #8
 8001174:	f003 0307 	and.w	r3, r3, #7
 8001178:	4a03      	ldr	r2, [pc, #12]	; (8001188 <MCAL_RCC_Get_PCLK1_Freq+0x24>)
 800117a:	5cd3      	ldrb	r3, [r2, r3]
 800117c:	fa21 f303 	lsr.w	r3, r1, r3
	                                                      Read Value of  PPRE1 prescaler To Determine index On Upper Array */

}
 8001180:	4618      	mov	r0, r3
 8001182:	bd80      	pop	{r7, pc}
 8001184:	40021000 	.word	0x40021000
 8001188:	08001b34 	.word	0x08001b34

0800118c <MCAL_RCC_Get_PCLK2_Freq>:


uint32_t MCAL_RCC_Get_PCLK2_Freq(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
	100: HCLK divided by 2
	101: HCLK divided by 4
	110: HCLK divided by 8
	111: HCLK divided by 16*/

	return (MCAL_RCC_Get_HCLK_Freq() >> (APBPrescTable[( (RCC->CFGR >>11) & 0b111 )])); /*(( RCC->CFGR >>11) & 0b111) This Is
 8001190:	f7ff ffd4 	bl	800113c <MCAL_RCC_Get_HCLK_Freq>
 8001194:	4601      	mov	r1, r0
 8001196:	4b05      	ldr	r3, [pc, #20]	; (80011ac <MCAL_RCC_Get_PCLK2_Freq+0x20>)
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	0adb      	lsrs	r3, r3, #11
 800119c:	f003 0307 	and.w	r3, r3, #7
 80011a0:	4a03      	ldr	r2, [pc, #12]	; (80011b0 <MCAL_RCC_Get_PCLK2_Freq+0x24>)
 80011a2:	5cd3      	ldrb	r3, [r2, r3]
 80011a4:	fa21 f303 	lsr.w	r3, r1, r3
	                                                      Read Value of  PPRE2 prescaler To Determine index On Upper Array */

}
 80011a8:	4618      	mov	r0, r3
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	40021000 	.word	0x40021000
 80011b0:	08001b34 	.word	0x08001b34

080011b4 <Timer2_init>:

#include "Timer.h"


void Timer2_init(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
	RCC_APB1ENR |=(1<<0);     //Enable Rcc for tim2
 80011b8:	4b0e      	ldr	r3, [pc, #56]	; (80011f4 <Timer2_init+0x40>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a0d      	ldr	r2, [pc, #52]	; (80011f4 <Timer2_init+0x40>)
 80011be:	f043 0301 	orr.w	r3, r3, #1
 80011c2:	6013      	str	r3, [r2, #0]
	TIM2_PSC = 7;             //Clk_input=(8M/(7+1))=1MHZ
 80011c4:	4b0c      	ldr	r3, [pc, #48]	; (80011f8 <Timer2_init+0x44>)
 80011c6:	2207      	movs	r2, #7
 80011c8:	601a      	str	r2, [r3, #0]
	TIM2_ARR = 0xC350;        //to make interrupt after 50000 tike(50000*10^-6)=0.05-->20*0.05=1
 80011ca:	4b0c      	ldr	r3, [pc, #48]	; (80011fc <Timer2_init+0x48>)
 80011cc:	f24c 3250 	movw	r2, #50000	; 0xc350
 80011d0:	601a      	str	r2, [r3, #0]
	TIM2_CR1 |=(1<<0);
 80011d2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011dc:	f043 0301 	orr.w	r3, r3, #1
 80011e0:	6013      	str	r3, [r2, #0]
	while(!(TIM2_SR)&(1<<0));
 80011e2:	bf00      	nop
 80011e4:	4b06      	ldr	r3, [pc, #24]	; (8001200 <Timer2_init+0x4c>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d0fb      	beq.n	80011e4 <Timer2_init+0x30>
}
 80011ec:	bf00      	nop
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bc80      	pop	{r7}
 80011f2:	4770      	bx	lr
 80011f4:	4002101c 	.word	0x4002101c
 80011f8:	40000028 	.word	0x40000028
 80011fc:	4000002c 	.word	0x4000002c
 8001200:	40000010 	.word	0x40000010

08001204 <dus>:

void dus(int us)
{
 8001204:	b480      	push	{r7}
 8001206:	b083      	sub	sp, #12
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
	TIM2_CNT=0;
 800120c:	4b06      	ldr	r3, [pc, #24]	; (8001228 <dus+0x24>)
 800120e:	2200      	movs	r2, #0
 8001210:	601a      	str	r2, [r3, #0]
	while(TIM2_CNT<us);
 8001212:	bf00      	nop
 8001214:	4b04      	ldr	r3, [pc, #16]	; (8001228 <dus+0x24>)
 8001216:	681a      	ldr	r2, [r3, #0]
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	429a      	cmp	r2, r3
 800121c:	d3fa      	bcc.n	8001214 <dus+0x10>
}
 800121e:	bf00      	nop
 8001220:	370c      	adds	r7, #12
 8001222:	46bd      	mov	sp, r7
 8001224:	bc80      	pop	{r7}
 8001226:	4770      	bx	lr
 8001228:	40000024 	.word	0x40000024

0800122c <dms>:

void dms(int ms)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b084      	sub	sp, #16
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
	int i=0;
 8001234:	2300      	movs	r3, #0
 8001236:	60fb      	str	r3, [r7, #12]
	for(i=0;i<ms;i++)
 8001238:	2300      	movs	r3, #0
 800123a:	60fb      	str	r3, [r7, #12]
 800123c:	e006      	b.n	800124c <dms+0x20>
	{
		dus(1000);
 800123e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001242:	f7ff ffdf 	bl	8001204 <dus>
	for(i=0;i<ms;i++)
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	3301      	adds	r3, #1
 800124a:	60fb      	str	r3, [r7, #12]
 800124c:	68fa      	ldr	r2, [r7, #12]
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	429a      	cmp	r2, r3
 8001252:	dbf4      	blt.n	800123e <dms+0x12>
	}
}
 8001254:	bf00      	nop
 8001256:	3710      	adds	r7, #16
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}

0800125c <main>:
		FOURBIT_2LINE_7DOT,0
};


int main(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b08c      	sub	sp, #48	; 0x30
 8001260:	af00      	add	r7, sp, #0
	RCC_GPIOA_CLOCK_EN();
 8001262:	4bac      	ldr	r3, [pc, #688]	; (8001514 <main+0x2b8>)
 8001264:	699b      	ldr	r3, [r3, #24]
 8001266:	4aab      	ldr	r2, [pc, #684]	; (8001514 <main+0x2b8>)
 8001268:	f043 0304 	orr.w	r3, r3, #4
 800126c:	6193      	str	r3, [r2, #24]
	RCC_GPIOB_CLOCK_EN();
 800126e:	4ba9      	ldr	r3, [pc, #676]	; (8001514 <main+0x2b8>)
 8001270:	699b      	ldr	r3, [r3, #24]
 8001272:	4aa8      	ldr	r2, [pc, #672]	; (8001514 <main+0x2b8>)
 8001274:	f043 0308 	orr.w	r3, r3, #8
 8001278:	6193      	str	r3, [r2, #24]
	RCC_AFIO_CLOCK_EN();
 800127a:	4ba6      	ldr	r3, [pc, #664]	; (8001514 <main+0x2b8>)
 800127c:	699b      	ldr	r3, [r3, #24]
 800127e:	4aa5      	ldr	r2, [pc, #660]	; (8001514 <main+0x2b8>)
 8001280:	f043 0301 	orr.w	r3, r3, #1
 8001284:	6193      	str	r3, [r2, #24]
	keypad_Init();
 8001286:	f7fe ff73 	bl	8000170 <keypad_Init>
	Timer2_init();
 800128a:	f7ff ff93 	bl	80011b4 <Timer2_init>
	Servo1_Entry_Gate_Init();
 800128e:	f7ff fa2f 	bl	80006f0 <Servo1_Entry_Gate_Init>
	Servo2_Exit_Gate_Init();
 8001292:	f7ff fa75 	bl	8000780 <Servo2_Exit_Gate_Init>
	 * PA11 CTC
	 * PA12 RTS
	 */
	USART_Config uartCFG;

	uartCFG.BaudRate = USART_BaudRate_115200;
 8001296:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800129a:	61fb      	str	r3, [r7, #28]
	uartCFG.HW_FlowCtrl = USART_HW_FlowCtrl_NONE;
 800129c:	2300      	movs	r3, #0
 800129e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uartCFG.IRQ_Enable = USART_IRQ_Enable_RXNE;
 80012a2:	2320      	movs	r3, #32
 80012a4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uartCFG.P_IRQ_Call_Back = RFID_CARD_Enter_CallBack;
 80012a8:	4b9b      	ldr	r3, [pc, #620]	; (8001518 <main+0x2bc>)
 80012aa:	62bb      	str	r3, [r7, #40]	; 0x28
	uartCFG.Parity = USART_Parity_NONE;
 80012ac:	2300      	movs	r3, #0
 80012ae:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	uartCFG.PayLoad_Length = USART_PayLoad_Length_8B;
 80012b2:	2300      	movs	r3, #0
 80012b4:	f887 3020 	strb.w	r3, [r7, #32]
	uartCFG.StopBits = USART_StopBits_1;
 80012b8:	2300      	movs	r3, #0
 80012ba:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	uartCFG.USART_MODE = USART_MODE_RX_AND_TX;
 80012be:	230c      	movs	r3, #12
 80012c0:	763b      	strb	r3, [r7, #24]
	MCAL_UART_INIT(USART1, &uartCFG);
 80012c2:	f107 0318 	add.w	r3, r7, #24
 80012c6:	4619      	mov	r1, r3
 80012c8:	4894      	ldr	r0, [pc, #592]	; (800151c <main+0x2c0>)
 80012ca:	f7ff fb5d 	bl	8000988 <MCAL_UART_INIT>
	MCAL_UART_GPIO_Set_Pins(USART1);
 80012ce:	4893      	ldr	r0, [pc, #588]	; (800151c <main+0x2c0>)
 80012d0:	f7ff fcb6 	bl	8000c40 <MCAL_UART_GPIO_Set_Pins>
	 * PA0 ->CTS
	 * PA1 ->RTS
	 */
	USART_Config uart2CFG;

	uart2CFG.BaudRate = USART_BaudRate_115200;
 80012d4:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80012d8:	60bb      	str	r3, [r7, #8]
	uart2CFG.HW_FlowCtrl = USART_HW_FlowCtrl_NONE;
 80012da:	2300      	movs	r3, #0
 80012dc:	73fb      	strb	r3, [r7, #15]
	uart2CFG.IRQ_Enable = USART_IRQ_Enable_RXNE;
 80012de:	2320      	movs	r3, #32
 80012e0:	743b      	strb	r3, [r7, #16]
	uart2CFG.P_IRQ_Call_Back = RFID_CARD_EXIT_CallBack;
 80012e2:	4b8f      	ldr	r3, [pc, #572]	; (8001520 <main+0x2c4>)
 80012e4:	617b      	str	r3, [r7, #20]
	uart2CFG.Parity = USART_Parity_NONE;
 80012e6:	2300      	movs	r3, #0
 80012e8:	737b      	strb	r3, [r7, #13]
	uart2CFG.PayLoad_Length = USART_PayLoad_Length_8B;
 80012ea:	2300      	movs	r3, #0
 80012ec:	733b      	strb	r3, [r7, #12]
	uart2CFG.StopBits = USART_StopBits_1;
 80012ee:	2300      	movs	r3, #0
 80012f0:	73bb      	strb	r3, [r7, #14]
	uart2CFG.USART_MODE = USART_MODE_RX_AND_TX;
 80012f2:	230c      	movs	r3, #12
 80012f4:	713b      	strb	r3, [r7, #4]
	MCAL_UART_INIT(USART2, &uart2CFG);
 80012f6:	1d3b      	adds	r3, r7, #4
 80012f8:	4619      	mov	r1, r3
 80012fa:	488a      	ldr	r0, [pc, #552]	; (8001524 <main+0x2c8>)
 80012fc:	f7ff fb44 	bl	8000988 <MCAL_UART_INIT>
	MCAL_UART_GPIO_Set_Pins(USART2);
 8001300:	4888      	ldr	r0, [pc, #544]	; (8001524 <main+0x2c8>)
 8001302:	f7ff fc9d 	bl	8000c40 <MCAL_UART_GPIO_Set_Pins>

	LCD_init(&LCD);
 8001306:	4888      	ldr	r0, [pc, #544]	; (8001528 <main+0x2cc>)
 8001308:	f7ff f844 	bl	8000394 <LCD_init>
	LCD_init(&LCD2);
 800130c:	4887      	ldr	r0, [pc, #540]	; (800152c <main+0x2d0>)
 800130e:	f7ff f841 	bl	8000394 <LCD_init>
	LEDs_Init();
 8001312:	f000 fa17 	bl	8001744 <LEDs_Init>
	PIRs_Iint();
 8001316:	f000 fa35 	bl	8001784 <PIRs_Iint>

	/*==========Enter IDs To Store In Array Pass==========*/
	 Store_IDs_From_Admin();
 800131a:	f000 fa59 	bl	80017d0 <Store_IDs_From_Admin>

	/*Dash Bord LCD*/
	LCD_Welcome();
 800131e:	f000 f9c1 	bl	80016a4 <LCD_Welcome>
	dms(200);
 8001322:	20c8      	movs	r0, #200	; 0xc8
 8001324:	f7ff ff82 	bl	800122c <dms>
	LCD_Display_Empty_Slots();
 8001328:	f000 f9e2 	bl	80016f0 <LCD_Display_Empty_Slots>


	int i=0;
 800132c:	2300      	movs	r3, #0
 800132e:	62fb      	str	r3, [r7, #44]	; 0x2c
	while(1)
	{
		if(Available_Slots>'0')
 8001330:	4b7f      	ldr	r3, [pc, #508]	; (8001530 <main+0x2d4>)
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	2b30      	cmp	r3, #48	; 0x30
 8001336:	d91b      	bls.n	8001370 <main+0x114>
		{
			LCD_gotoxy(&LCD2, -4, 2);
 8001338:	2202      	movs	r2, #2
 800133a:	21fc      	movs	r1, #252	; 0xfc
 800133c:	487b      	ldr	r0, [pc, #492]	; (800152c <main+0x2d0>)
 800133e:	f7ff f99d 	bl	800067c <LCD_gotoxy>
			LCD_sendstring(&LCD2,"Put Your Id In");
 8001342:	497c      	ldr	r1, [pc, #496]	; (8001534 <main+0x2d8>)
 8001344:	4879      	ldr	r0, [pc, #484]	; (800152c <main+0x2d0>)
 8001346:	f7ff f955 	bl	80005f4 <LCD_sendstring>
			LCD_gotoxy(&LCD2,-4,3 );
 800134a:	2203      	movs	r2, #3
 800134c:	21fc      	movs	r1, #252	; 0xfc
 800134e:	4877      	ldr	r0, [pc, #476]	; (800152c <main+0x2d0>)
 8001350:	f7ff f994 	bl	800067c <LCD_gotoxy>
			LCD_sendstring(&LCD2,"Card Reader");
 8001354:	4978      	ldr	r1, [pc, #480]	; (8001538 <main+0x2dc>)
 8001356:	4875      	ldr	r0, [pc, #468]	; (800152c <main+0x2d0>)
 8001358:	f7ff f94c 	bl	80005f4 <LCD_sendstring>
			while(RFID_CARD_Enter ==0 && RFID_CARD_EXIT==0); //Wait for Enter any id
 800135c:	bf00      	nop
 800135e:	4b77      	ldr	r3, [pc, #476]	; (800153c <main+0x2e0>)
 8001360:	881b      	ldrh	r3, [r3, #0]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d120      	bne.n	80013a8 <main+0x14c>
 8001366:	4b76      	ldr	r3, [pc, #472]	; (8001540 <main+0x2e4>)
 8001368:	881b      	ldrh	r3, [r3, #0]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d0f7      	beq.n	800135e <main+0x102>
 800136e:	e01b      	b.n	80013a8 <main+0x14c>
		}
		/*======Parking is full so not allow enetr cars=======*/
		else
		{
			LCD_sendchar(&LCD2, 0x0c, COMMAND);
 8001370:	2200      	movs	r2, #0
 8001372:	210c      	movs	r1, #12
 8001374:	486d      	ldr	r0, [pc, #436]	; (800152c <main+0x2d0>)
 8001376:	f7ff f894 	bl	80004a2 <LCD_sendchar>
			LCD_sendchar(&LCD2, 0x01, COMMAND);
 800137a:	2200      	movs	r2, #0
 800137c:	2101      	movs	r1, #1
 800137e:	486b      	ldr	r0, [pc, #428]	; (800152c <main+0x2d0>)
 8001380:	f7ff f88f 	bl	80004a2 <LCD_sendchar>
			LCD_gotoxy(&LCD2, 0, 0);
 8001384:	2200      	movs	r2, #0
 8001386:	2100      	movs	r1, #0
 8001388:	4868      	ldr	r0, [pc, #416]	; (800152c <main+0x2d0>)
 800138a:	f7ff f977 	bl	800067c <LCD_gotoxy>
			LCD_sendstring(&LCD2,"Parking Is Full");
 800138e:	496d      	ldr	r1, [pc, #436]	; (8001544 <main+0x2e8>)
 8001390:	4866      	ldr	r0, [pc, #408]	; (800152c <main+0x2d0>)
 8001392:	f7ff f92f 	bl	80005f4 <LCD_sendstring>
			LCD_gotoxy(&LCD2, 0, 1);
 8001396:	2201      	movs	r2, #1
 8001398:	2100      	movs	r1, #0
 800139a:	4864      	ldr	r0, [pc, #400]	; (800152c <main+0x2d0>)
 800139c:	f7ff f96e 	bl	800067c <LCD_gotoxy>
			LCD_sendstring(&LCD2,"Entry Not Allowed");
 80013a0:	4969      	ldr	r1, [pc, #420]	; (8001548 <main+0x2ec>)
 80013a2:	4862      	ldr	r0, [pc, #392]	; (800152c <main+0x2d0>)
 80013a4:	f7ff f926 	bl	80005f4 <LCD_sendstring>
		}

		//Search about ID in array of Pass
		for(i=0;i<3;i++)
 80013a8:	2300      	movs	r3, #0
 80013aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80013ac:	e017      	b.n	80013de <main+0x182>
		{
			if(RFID_CARD_Enter == pass[i] || RFID_CARD_EXIT == pass[i] )
 80013ae:	4a67      	ldr	r2, [pc, #412]	; (800154c <main+0x2f0>)
 80013b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013b2:	4413      	add	r3, r2
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	b29a      	uxth	r2, r3
 80013b8:	4b60      	ldr	r3, [pc, #384]	; (800153c <main+0x2e0>)
 80013ba:	881b      	ldrh	r3, [r3, #0]
 80013bc:	429a      	cmp	r2, r3
 80013be:	d008      	beq.n	80013d2 <main+0x176>
 80013c0:	4a62      	ldr	r2, [pc, #392]	; (800154c <main+0x2f0>)
 80013c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013c4:	4413      	add	r3, r2
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	b29a      	uxth	r2, r3
 80013ca:	4b5d      	ldr	r3, [pc, #372]	; (8001540 <main+0x2e4>)
 80013cc:	881b      	ldrh	r3, [r3, #0]
 80013ce:	429a      	cmp	r2, r3
 80013d0:	d102      	bne.n	80013d8 <main+0x17c>
			{
				Search_Done=1;
 80013d2:	4b5f      	ldr	r3, [pc, #380]	; (8001550 <main+0x2f4>)
 80013d4:	2201      	movs	r2, #1
 80013d6:	701a      	strb	r2, [r3, #0]
		for(i=0;i<3;i++)
 80013d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013da:	3301      	adds	r3, #1
 80013dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80013de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013e0:	2b02      	cmp	r3, #2
 80013e2:	dde4      	ble.n	80013ae <main+0x152>
			}

		}
		/*=====================Enter gate=====================*/
		if(Search_Done == 1 && RFID_CARD_Enter !=0 && Available_Slots>'0')
 80013e4:	4b5a      	ldr	r3, [pc, #360]	; (8001550 <main+0x2f4>)
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	2b01      	cmp	r3, #1
 80013ea:	d157      	bne.n	800149c <main+0x240>
 80013ec:	4b53      	ldr	r3, [pc, #332]	; (800153c <main+0x2e0>)
 80013ee:	881b      	ldrh	r3, [r3, #0]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d053      	beq.n	800149c <main+0x240>
 80013f4:	4b4e      	ldr	r3, [pc, #312]	; (8001530 <main+0x2d4>)
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	2b30      	cmp	r3, #48	; 0x30
 80013fa:	d94f      	bls.n	800149c <main+0x240>
		{
			LCD_sendchar(&LCD2, 0x0c, COMMAND);
 80013fc:	2200      	movs	r2, #0
 80013fe:	210c      	movs	r1, #12
 8001400:	484a      	ldr	r0, [pc, #296]	; (800152c <main+0x2d0>)
 8001402:	f7ff f84e 	bl	80004a2 <LCD_sendchar>
			LCD_sendchar(&LCD2, 0x01, COMMAND);
 8001406:	2200      	movs	r2, #0
 8001408:	2101      	movs	r1, #1
 800140a:	4848      	ldr	r0, [pc, #288]	; (800152c <main+0x2d0>)
 800140c:	f7ff f849 	bl	80004a2 <LCD_sendchar>
			LCD_gotoxy(&LCD2, 0, 0);
 8001410:	2200      	movs	r2, #0
 8001412:	2100      	movs	r1, #0
 8001414:	4845      	ldr	r0, [pc, #276]	; (800152c <main+0x2d0>)
 8001416:	f7ff f931 	bl	800067c <LCD_gotoxy>
			LCD_sendstring(&LCD2,"ID Is Right");
 800141a:	494e      	ldr	r1, [pc, #312]	; (8001554 <main+0x2f8>)
 800141c:	4843      	ldr	r0, [pc, #268]	; (800152c <main+0x2d0>)
 800141e:	f7ff f8e9 	bl	80005f4 <LCD_sendstring>
			LCD_gotoxy(&LCD2, 0, 1);
 8001422:	2201      	movs	r2, #1
 8001424:	2100      	movs	r1, #0
 8001426:	4841      	ldr	r0, [pc, #260]	; (800152c <main+0x2d0>)
 8001428:	f7ff f928 	bl	800067c <LCD_gotoxy>
			LCD_sendstring(&LCD2,"Entry gate Opens");
 800142c:	494a      	ldr	r1, [pc, #296]	; (8001558 <main+0x2fc>)
 800142e:	483f      	ldr	r0, [pc, #252]	; (800152c <main+0x2d0>)
 8001430:	f7ff f8e0 	bl	80005f4 <LCD_sendstring>

			//Green led*/
			MCAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);
 8001434:	2200      	movs	r2, #0
 8001436:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800143a:	4848      	ldr	r0, [pc, #288]	; (800155c <main+0x300>)
 800143c:	f7ff fe04 	bl	8001048 <MCAL_GPIO_WritePin>
			Servo1_Entry_Gate(UP);
 8001440:	2001      	movs	r0, #1
 8001442:	f7ff f96b 	bl	800071c <Servo1_Entry_Gate>
			Available_Slots--;
 8001446:	4b3a      	ldr	r3, [pc, #232]	; (8001530 <main+0x2d4>)
 8001448:	781b      	ldrb	r3, [r3, #0]
 800144a:	3b01      	subs	r3, #1
 800144c:	b2da      	uxtb	r2, r3
 800144e:	4b38      	ldr	r3, [pc, #224]	; (8001530 <main+0x2d4>)
 8001450:	701a      	strb	r2, [r3, #0]

			RFID_CARD_Enter =0;
 8001452:	4b3a      	ldr	r3, [pc, #232]	; (800153c <main+0x2e0>)
 8001454:	2200      	movs	r2, #0
 8001456:	801a      	strh	r2, [r3, #0]
			Search_Done =0;
 8001458:	4b3d      	ldr	r3, [pc, #244]	; (8001550 <main+0x2f4>)
 800145a:	2200      	movs	r2, #0
 800145c:	701a      	strb	r2, [r3, #0]

			dms(300);
 800145e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001462:	f7ff fee3 	bl	800122c <dms>
			//wait for car fully enter
			while(MCAL_GPIO_Read_Pin(GPIOA, GPIO_PIN_7)==1) //Read the PIR1 state
 8001466:	e002      	b.n	800146e <main+0x212>
			{
				dms(200);
 8001468:	20c8      	movs	r0, #200	; 0xc8
 800146a:	f7ff fedf 	bl	800122c <dms>
			while(MCAL_GPIO_Read_Pin(GPIOA, GPIO_PIN_7)==1) //Read the PIR1 state
 800146e:	2180      	movs	r1, #128	; 0x80
 8001470:	483a      	ldr	r0, [pc, #232]	; (800155c <main+0x300>)
 8001472:	f7ff fdc1 	bl	8000ff8 <MCAL_GPIO_Read_Pin>
 8001476:	4603      	mov	r3, r0
 8001478:	2b01      	cmp	r3, #1
 800147a:	d0f5      	beq.n	8001468 <main+0x20c>
			}

			//Green led of
			MCAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1);
 800147c:	2201      	movs	r2, #1
 800147e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001482:	4836      	ldr	r0, [pc, #216]	; (800155c <main+0x300>)
 8001484:	f7ff fde0 	bl	8001048 <MCAL_GPIO_WritePin>
			Servo1_Entry_Gate(Down);
 8001488:	2002      	movs	r0, #2
 800148a:	f7ff f947 	bl	800071c <Servo1_Entry_Gate>

			/*Dash Bord LCD*/
			LCD_Welcome();
 800148e:	f000 f909 	bl	80016a4 <LCD_Welcome>
			dms(200);
 8001492:	20c8      	movs	r0, #200	; 0xc8
 8001494:	f7ff feca 	bl	800122c <dms>
			LCD_Display_Empty_Slots();
 8001498:	f000 f92a 	bl	80016f0 <LCD_Display_Empty_Slots>

		}
		/*===================Exit gate====================*/
		if(Search_Done == 1 && RFID_CARD_EXIT !=0 && Available_Slots<'3')
 800149c:	4b2c      	ldr	r3, [pc, #176]	; (8001550 <main+0x2f4>)
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	2b01      	cmp	r3, #1
 80014a2:	d17f      	bne.n	80015a4 <main+0x348>
 80014a4:	4b26      	ldr	r3, [pc, #152]	; (8001540 <main+0x2e4>)
 80014a6:	881b      	ldrh	r3, [r3, #0]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d07b      	beq.n	80015a4 <main+0x348>
 80014ac:	4b20      	ldr	r3, [pc, #128]	; (8001530 <main+0x2d4>)
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	2b32      	cmp	r3, #50	; 0x32
 80014b2:	d877      	bhi.n	80015a4 <main+0x348>
		{
			LCD_sendchar(&LCD2, 0x0c, COMMAND);
 80014b4:	2200      	movs	r2, #0
 80014b6:	210c      	movs	r1, #12
 80014b8:	481c      	ldr	r0, [pc, #112]	; (800152c <main+0x2d0>)
 80014ba:	f7fe fff2 	bl	80004a2 <LCD_sendchar>
			LCD_sendchar(&LCD2, 0x01, COMMAND);
 80014be:	2200      	movs	r2, #0
 80014c0:	2101      	movs	r1, #1
 80014c2:	481a      	ldr	r0, [pc, #104]	; (800152c <main+0x2d0>)
 80014c4:	f7fe ffed 	bl	80004a2 <LCD_sendchar>
			LCD_gotoxy(&LCD2, 0, 0);
 80014c8:	2200      	movs	r2, #0
 80014ca:	2100      	movs	r1, #0
 80014cc:	4817      	ldr	r0, [pc, #92]	; (800152c <main+0x2d0>)
 80014ce:	f7ff f8d5 	bl	800067c <LCD_gotoxy>
			LCD_sendstring(&LCD2,"ID Is Right");
 80014d2:	4920      	ldr	r1, [pc, #128]	; (8001554 <main+0x2f8>)
 80014d4:	4815      	ldr	r0, [pc, #84]	; (800152c <main+0x2d0>)
 80014d6:	f7ff f88d 	bl	80005f4 <LCD_sendstring>
			LCD_gotoxy(&LCD2, 0, 1);
 80014da:	2201      	movs	r2, #1
 80014dc:	2100      	movs	r1, #0
 80014de:	4813      	ldr	r0, [pc, #76]	; (800152c <main+0x2d0>)
 80014e0:	f7ff f8cc 	bl	800067c <LCD_gotoxy>
			LCD_sendstring(&LCD2,"Exit Gate Opens");
 80014e4:	491e      	ldr	r1, [pc, #120]	; (8001560 <main+0x304>)
 80014e6:	4811      	ldr	r0, [pc, #68]	; (800152c <main+0x2d0>)
 80014e8:	f7ff f884 	bl	80005f4 <LCD_sendstring>

			//Green led*/
			MCAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);
 80014ec:	2200      	movs	r2, #0
 80014ee:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80014f2:	481a      	ldr	r0, [pc, #104]	; (800155c <main+0x300>)
 80014f4:	f7ff fda8 	bl	8001048 <MCAL_GPIO_WritePin>
			Servo2_Exit_Gate(UP);
 80014f8:	2001      	movs	r0, #1
 80014fa:	f7ff f957 	bl	80007ac <Servo2_Exit_Gate>
			Available_Slots++;
 80014fe:	4b0c      	ldr	r3, [pc, #48]	; (8001530 <main+0x2d4>)
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	3301      	adds	r3, #1
 8001504:	b2da      	uxtb	r2, r3
 8001506:	4b0a      	ldr	r3, [pc, #40]	; (8001530 <main+0x2d4>)
 8001508:	701a      	strb	r2, [r3, #0]
			dms(300);
 800150a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800150e:	f7ff fe8d 	bl	800122c <dms>
			//wait for car fully enter
			while(MCAL_GPIO_Read_Pin(GPIOA, GPIO_PIN_1)==1) //Read the PIR2 state
 8001512:	e02a      	b.n	800156a <main+0x30e>
 8001514:	40021000 	.word	0x40021000
 8001518:	0800165d 	.word	0x0800165d
 800151c:	40013800 	.word	0x40013800
 8001520:	08001681 	.word	0x08001681
 8001524:	40004400 	.word	0x40004400
 8001528:	20000004 	.word	0x20000004
 800152c:	20000018 	.word	0x20000018
 8001530:	20000000 	.word	0x20000000
 8001534:	08001a38 	.word	0x08001a38
 8001538:	08001a48 	.word	0x08001a48
 800153c:	200000c4 	.word	0x200000c4
 8001540:	200000c6 	.word	0x200000c6
 8001544:	08001a54 	.word	0x08001a54
 8001548:	08001a64 	.word	0x08001a64
 800154c:	20000048 	.word	0x20000048
 8001550:	2000004b 	.word	0x2000004b
 8001554:	08001a78 	.word	0x08001a78
 8001558:	08001a84 	.word	0x08001a84
 800155c:	40010800 	.word	0x40010800
 8001560:	08001a98 	.word	0x08001a98
			{
				dms(200);
 8001564:	20c8      	movs	r0, #200	; 0xc8
 8001566:	f7ff fe61 	bl	800122c <dms>
			while(MCAL_GPIO_Read_Pin(GPIOA, GPIO_PIN_1)==1) //Read the PIR2 state
 800156a:	2102      	movs	r1, #2
 800156c:	4834      	ldr	r0, [pc, #208]	; (8001640 <main+0x3e4>)
 800156e:	f7ff fd43 	bl	8000ff8 <MCAL_GPIO_Read_Pin>
 8001572:	4603      	mov	r3, r0
 8001574:	2b01      	cmp	r3, #1
 8001576:	d0f5      	beq.n	8001564 <main+0x308>
			}
			//Green led of
			MCAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1);
 8001578:	2201      	movs	r2, #1
 800157a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800157e:	4830      	ldr	r0, [pc, #192]	; (8001640 <main+0x3e4>)
 8001580:	f7ff fd62 	bl	8001048 <MCAL_GPIO_WritePin>
			Servo2_Exit_Gate(Down);
 8001584:	2002      	movs	r0, #2
 8001586:	f7ff f911 	bl	80007ac <Servo2_Exit_Gate>

			RFID_CARD_EXIT =0;
 800158a:	4b2e      	ldr	r3, [pc, #184]	; (8001644 <main+0x3e8>)
 800158c:	2200      	movs	r2, #0
 800158e:	801a      	strh	r2, [r3, #0]
			Search_Done =0;
 8001590:	4b2d      	ldr	r3, [pc, #180]	; (8001648 <main+0x3ec>)
 8001592:	2200      	movs	r2, #0
 8001594:	701a      	strb	r2, [r3, #0]

			/*Dash Bord LCD*/
			LCD_Welcome();
 8001596:	f000 f885 	bl	80016a4 <LCD_Welcome>
			dms(200);
 800159a:	20c8      	movs	r0, #200	; 0xc8
 800159c:	f7ff fe46 	bl	800122c <dms>
			LCD_Display_Empty_Slots();
 80015a0:	f000 f8a6 	bl	80016f0 <LCD_Display_Empty_Slots>
		}

		/*==================Wrong Id====================*/
		if(Search_Done == 0 && (RFID_CARD_Enter >0 || RFID_CARD_EXIT>0) )
 80015a4:	4b28      	ldr	r3, [pc, #160]	; (8001648 <main+0x3ec>)
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	f47f aec1 	bne.w	8001330 <main+0xd4>
 80015ae:	4b27      	ldr	r3, [pc, #156]	; (800164c <main+0x3f0>)
 80015b0:	881b      	ldrh	r3, [r3, #0]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d104      	bne.n	80015c0 <main+0x364>
 80015b6:	4b23      	ldr	r3, [pc, #140]	; (8001644 <main+0x3e8>)
 80015b8:	881b      	ldrh	r3, [r3, #0]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	f43f aeb8 	beq.w	8001330 <main+0xd4>
		{
			LCD_sendchar(&LCD2, 0x0c, COMMAND);
 80015c0:	2200      	movs	r2, #0
 80015c2:	210c      	movs	r1, #12
 80015c4:	4822      	ldr	r0, [pc, #136]	; (8001650 <main+0x3f4>)
 80015c6:	f7fe ff6c 	bl	80004a2 <LCD_sendchar>
			LCD_sendchar(&LCD2, 0x01, COMMAND);
 80015ca:	2200      	movs	r2, #0
 80015cc:	2101      	movs	r1, #1
 80015ce:	4820      	ldr	r0, [pc, #128]	; (8001650 <main+0x3f4>)
 80015d0:	f7fe ff67 	bl	80004a2 <LCD_sendchar>
			LCD_gotoxy(&LCD2, 0, 0);
 80015d4:	2200      	movs	r2, #0
 80015d6:	2100      	movs	r1, #0
 80015d8:	481d      	ldr	r0, [pc, #116]	; (8001650 <main+0x3f4>)
 80015da:	f7ff f84f 	bl	800067c <LCD_gotoxy>
			LCD_sendstring(&LCD2,"Wrong ID");
 80015de:	491d      	ldr	r1, [pc, #116]	; (8001654 <main+0x3f8>)
 80015e0:	481b      	ldr	r0, [pc, #108]	; (8001650 <main+0x3f4>)
 80015e2:	f7ff f807 	bl	80005f4 <LCD_sendstring>
			LCD_gotoxy(&LCD2, 0, 1);
 80015e6:	2201      	movs	r2, #1
 80015e8:	2100      	movs	r1, #0
 80015ea:	4819      	ldr	r0, [pc, #100]	; (8001650 <main+0x3f4>)
 80015ec:	f7ff f846 	bl	800067c <LCD_gotoxy>
			LCD_sendstring(&LCD2,"Try Again");
 80015f0:	4919      	ldr	r1, [pc, #100]	; (8001658 <main+0x3fc>)
 80015f2:	4817      	ldr	r0, [pc, #92]	; (8001650 <main+0x3f4>)
 80015f4:	f7fe fffe 	bl	80005f4 <LCD_sendstring>

			for(i=0;i<3;i++)
 80015f8:	2300      	movs	r3, #0
 80015fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015fc:	e009      	b.n	8001612 <main+0x3b6>
			{
				//Red led ON as alarm
				MCAL_GPIO_Toggle_pin(GPIOA, GPIO_PIN_0);
 80015fe:	2101      	movs	r1, #1
 8001600:	480f      	ldr	r0, [pc, #60]	; (8001640 <main+0x3e4>)
 8001602:	f7ff fd6a 	bl	80010da <MCAL_GPIO_Toggle_pin>
				dms(150);
 8001606:	2096      	movs	r0, #150	; 0x96
 8001608:	f7ff fe10 	bl	800122c <dms>
			for(i=0;i<3;i++)
 800160c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800160e:	3301      	adds	r3, #1
 8001610:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001614:	2b02      	cmp	r3, #2
 8001616:	ddf2      	ble.n	80015fe <main+0x3a2>
			}
			MCAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 1); //to ensure Red Led off after toggle
 8001618:	2201      	movs	r2, #1
 800161a:	2101      	movs	r1, #1
 800161c:	4808      	ldr	r0, [pc, #32]	; (8001640 <main+0x3e4>)
 800161e:	f7ff fd13 	bl	8001048 <MCAL_GPIO_WritePin>

			/*Dash Bord LCD*/
			LCD_Welcome();
 8001622:	f000 f83f 	bl	80016a4 <LCD_Welcome>
			dms(150);
 8001626:	2096      	movs	r0, #150	; 0x96
 8001628:	f7ff fe00 	bl	800122c <dms>
			LCD_Display_Empty_Slots();
 800162c:	f000 f860 	bl	80016f0 <LCD_Display_Empty_Slots>
			RFID_CARD_EXIT =0;
 8001630:	4b04      	ldr	r3, [pc, #16]	; (8001644 <main+0x3e8>)
 8001632:	2200      	movs	r2, #0
 8001634:	801a      	strh	r2, [r3, #0]
			RFID_CARD_Enter =0;
 8001636:	4b05      	ldr	r3, [pc, #20]	; (800164c <main+0x3f0>)
 8001638:	2200      	movs	r2, #0
 800163a:	801a      	strh	r2, [r3, #0]
		if(Available_Slots>'0')
 800163c:	e678      	b.n	8001330 <main+0xd4>
 800163e:	bf00      	nop
 8001640:	40010800 	.word	0x40010800
 8001644:	200000c6 	.word	0x200000c6
 8001648:	2000004b 	.word	0x2000004b
 800164c:	200000c4 	.word	0x200000c4
 8001650:	20000018 	.word	0x20000018
 8001654:	08001aa8 	.word	0x08001aa8
 8001658:	08001ab4 	.word	0x08001ab4

0800165c <RFID_CARD_Enter_CallBack>:
}


/*Call Back For UART*/
void RFID_CARD_Enter_CallBack(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
	MCAL_UART_RECEIVE_DATA(USART1, &RFID_CARD_Enter, disable);
 8001660:	2201      	movs	r2, #1
 8001662:	4905      	ldr	r1, [pc, #20]	; (8001678 <RFID_CARD_Enter_CallBack+0x1c>)
 8001664:	4805      	ldr	r0, [pc, #20]	; (800167c <RFID_CARD_Enter_CallBack+0x20>)
 8001666:	f7ff fab7 	bl	8000bd8 <MCAL_UART_RECEIVE_DATA>
	MCAL_UART_SEND_DATA(USART1, &RFID_CARD_Enter, enable);
 800166a:	2200      	movs	r2, #0
 800166c:	4902      	ldr	r1, [pc, #8]	; (8001678 <RFID_CARD_Enter_CallBack+0x1c>)
 800166e:	4803      	ldr	r0, [pc, #12]	; (800167c <RFID_CARD_Enter_CallBack+0x20>)
 8001670:	f7ff fa92 	bl	8000b98 <MCAL_UART_SEND_DATA>
}
 8001674:	bf00      	nop
 8001676:	bd80      	pop	{r7, pc}
 8001678:	200000c4 	.word	0x200000c4
 800167c:	40013800 	.word	0x40013800

08001680 <RFID_CARD_EXIT_CallBack>:

void RFID_CARD_EXIT_CallBack(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0
	MCAL_UART_RECEIVE_DATA(USART2, &RFID_CARD_EXIT, disable);
 8001684:	2201      	movs	r2, #1
 8001686:	4905      	ldr	r1, [pc, #20]	; (800169c <RFID_CARD_EXIT_CallBack+0x1c>)
 8001688:	4805      	ldr	r0, [pc, #20]	; (80016a0 <RFID_CARD_EXIT_CallBack+0x20>)
 800168a:	f7ff faa5 	bl	8000bd8 <MCAL_UART_RECEIVE_DATA>
	MCAL_UART_SEND_DATA(USART2, &RFID_CARD_EXIT, enable);
 800168e:	2200      	movs	r2, #0
 8001690:	4902      	ldr	r1, [pc, #8]	; (800169c <RFID_CARD_EXIT_CallBack+0x1c>)
 8001692:	4803      	ldr	r0, [pc, #12]	; (80016a0 <RFID_CARD_EXIT_CallBack+0x20>)
 8001694:	f7ff fa80 	bl	8000b98 <MCAL_UART_SEND_DATA>
}
 8001698:	bf00      	nop
 800169a:	bd80      	pop	{r7, pc}
 800169c:	200000c6 	.word	0x200000c6
 80016a0:	40004400 	.word	0x40004400

080016a4 <LCD_Welcome>:



void LCD_Welcome(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	af00      	add	r7, sp, #0
	/*Dash Bord LCD*/

	LCD_sendchar(&LCD2, 0x0c, COMMAND);
 80016a8:	2200      	movs	r2, #0
 80016aa:	210c      	movs	r1, #12
 80016ac:	480d      	ldr	r0, [pc, #52]	; (80016e4 <LCD_Welcome+0x40>)
 80016ae:	f7fe fef8 	bl	80004a2 <LCD_sendchar>
	LCD_sendchar(&LCD2, 0x01, COMMAND);
 80016b2:	2200      	movs	r2, #0
 80016b4:	2101      	movs	r1, #1
 80016b6:	480b      	ldr	r0, [pc, #44]	; (80016e4 <LCD_Welcome+0x40>)
 80016b8:	f7fe fef3 	bl	80004a2 <LCD_sendchar>
	LCD_gotoxy(&LCD2, 0, 0);
 80016bc:	2200      	movs	r2, #0
 80016be:	2100      	movs	r1, #0
 80016c0:	4808      	ldr	r0, [pc, #32]	; (80016e4 <LCD_Welcome+0x40>)
 80016c2:	f7fe ffdb 	bl	800067c <LCD_gotoxy>
	LCD_sendstring(&LCD2,"Welcome in");
 80016c6:	4908      	ldr	r1, [pc, #32]	; (80016e8 <LCD_Welcome+0x44>)
 80016c8:	4806      	ldr	r0, [pc, #24]	; (80016e4 <LCD_Welcome+0x40>)
 80016ca:	f7fe ff93 	bl	80005f4 <LCD_sendstring>
	LCD_gotoxy(&LCD2,0,1 );
 80016ce:	2201      	movs	r2, #1
 80016d0:	2100      	movs	r1, #0
 80016d2:	4804      	ldr	r0, [pc, #16]	; (80016e4 <LCD_Welcome+0x40>)
 80016d4:	f7fe ffd2 	bl	800067c <LCD_gotoxy>
	LCD_sendstring(&LCD2,"Mostafa Parking");
 80016d8:	4904      	ldr	r1, [pc, #16]	; (80016ec <LCD_Welcome+0x48>)
 80016da:	4802      	ldr	r0, [pc, #8]	; (80016e4 <LCD_Welcome+0x40>)
 80016dc:	f7fe ff8a 	bl	80005f4 <LCD_sendstring>
}
 80016e0:	bf00      	nop
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	20000018 	.word	0x20000018
 80016e8:	08001ac0 	.word	0x08001ac0
 80016ec:	08001acc 	.word	0x08001acc

080016f0 <LCD_Display_Empty_Slots>:

void LCD_Display_Empty_Slots(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	af00      	add	r7, sp, #0
	LCD_sendchar(&LCD2, 0x0c, COMMAND);
 80016f4:	2200      	movs	r2, #0
 80016f6:	210c      	movs	r1, #12
 80016f8:	480f      	ldr	r0, [pc, #60]	; (8001738 <LCD_Display_Empty_Slots+0x48>)
 80016fa:	f7fe fed2 	bl	80004a2 <LCD_sendchar>
	LCD_sendchar(&LCD2, 0x01, COMMAND);
 80016fe:	2200      	movs	r2, #0
 8001700:	2101      	movs	r1, #1
 8001702:	480d      	ldr	r0, [pc, #52]	; (8001738 <LCD_Display_Empty_Slots+0x48>)
 8001704:	f7fe fecd 	bl	80004a2 <LCD_sendchar>
	LCD_gotoxy(&LCD2, 0, 0);
 8001708:	2200      	movs	r2, #0
 800170a:	2100      	movs	r1, #0
 800170c:	480a      	ldr	r0, [pc, #40]	; (8001738 <LCD_Display_Empty_Slots+0x48>)
 800170e:	f7fe ffb5 	bl	800067c <LCD_gotoxy>
	LCD_sendstring(&LCD2,"Empty Slots=");
 8001712:	490a      	ldr	r1, [pc, #40]	; (800173c <LCD_Display_Empty_Slots+0x4c>)
 8001714:	4808      	ldr	r0, [pc, #32]	; (8001738 <LCD_Display_Empty_Slots+0x48>)
 8001716:	f7fe ff6d 	bl	80005f4 <LCD_sendstring>
	LCD_gotoxy(&LCD2, 13, 0);
 800171a:	2200      	movs	r2, #0
 800171c:	210d      	movs	r1, #13
 800171e:	4806      	ldr	r0, [pc, #24]	; (8001738 <LCD_Display_Empty_Slots+0x48>)
 8001720:	f7fe ffac 	bl	800067c <LCD_gotoxy>
	LCD_sendchar(&LCD2,Available_Slots, DATA);
 8001724:	4b06      	ldr	r3, [pc, #24]	; (8001740 <LCD_Display_Empty_Slots+0x50>)
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	2201      	movs	r2, #1
 800172a:	4619      	mov	r1, r3
 800172c:	4802      	ldr	r0, [pc, #8]	; (8001738 <LCD_Display_Empty_Slots+0x48>)
 800172e:	f7fe feb8 	bl	80004a2 <LCD_sendchar>
}
 8001732:	bf00      	nop
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	20000018 	.word	0x20000018
 800173c:	08001adc 	.word	0x08001adc
 8001740:	20000000 	.word	0x20000000

08001744 <LEDs_Init>:

void LEDs_Init(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b082      	sub	sp, #8
 8001748:	af00      	add	r7, sp, #0
	//RED LED A0
	GPIO_Pin_Configure_t PinCinfg;
	PinCinfg.GPIO_Pin_Number=GPIO_PIN_0;
 800174a:	2301      	movs	r3, #1
 800174c:	80bb      	strh	r3, [r7, #4]
	PinCinfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 800174e:	2304      	movs	r3, #4
 8001750:	71bb      	strb	r3, [r7, #6]
	PinCinfg.GPIO_OUTPUT_SPEED =GPIO_SPEED_10M;
 8001752:	2301      	movs	r3, #1
 8001754:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOA, &PinCinfg);
 8001756:	1d3b      	adds	r3, r7, #4
 8001758:	4619      	mov	r1, r3
 800175a:	4809      	ldr	r0, [pc, #36]	; (8001780 <LEDs_Init+0x3c>)
 800175c:	f7ff fbd1 	bl	8000f02 <MCAL_GPIO_Init>

	//GREEN LED A11
	PinCinfg.GPIO_Pin_Number=GPIO_PIN_11;
 8001760:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001764:	80bb      	strh	r3, [r7, #4]
	PinCinfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8001766:	2304      	movs	r3, #4
 8001768:	71bb      	strb	r3, [r7, #6]
	PinCinfg.GPIO_OUTPUT_SPEED =GPIO_SPEED_10M;
 800176a:	2301      	movs	r3, #1
 800176c:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOA, &PinCinfg);
 800176e:	1d3b      	adds	r3, r7, #4
 8001770:	4619      	mov	r1, r3
 8001772:	4803      	ldr	r0, [pc, #12]	; (8001780 <LEDs_Init+0x3c>)
 8001774:	f7ff fbc5 	bl	8000f02 <MCAL_GPIO_Init>
}
 8001778:	bf00      	nop
 800177a:	3708      	adds	r7, #8
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	40010800 	.word	0x40010800

08001784 <PIRs_Iint>:

void PIRs_Iint(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b082      	sub	sp, #8
 8001788:	af00      	add	r7, sp, #0
	//PIR1 A7
	GPIO_Pin_Configure_t PinCinfg;
	PinCinfg.GPIO_Pin_Number=GPIO_PIN_7;
 800178a:	2380      	movs	r3, #128	; 0x80
 800178c:	80bb      	strh	r3, [r7, #4]
	PinCinfg.GPIO_MODE = GPIO_MODE_INPUT_PU;
 800178e:	2302      	movs	r3, #2
 8001790:	71bb      	strb	r3, [r7, #6]
	MCAL_GPIO_Init(GPIOA, &PinCinfg);
 8001792:	1d3b      	adds	r3, r7, #4
 8001794:	4619      	mov	r1, r3
 8001796:	480d      	ldr	r0, [pc, #52]	; (80017cc <PIRs_Iint+0x48>)
 8001798:	f7ff fbb3 	bl	8000f02 <MCAL_GPIO_Init>

	//PIR2 A1
	PinCinfg.GPIO_Pin_Number=GPIO_PIN_1;
 800179c:	2302      	movs	r3, #2
 800179e:	80bb      	strh	r3, [r7, #4]
	PinCinfg.GPIO_MODE = GPIO_MODE_INPUT_PU;
 80017a0:	2302      	movs	r3, #2
 80017a2:	71bb      	strb	r3, [r7, #6]
	MCAL_GPIO_Init(GPIOA, &PinCinfg);
 80017a4:	1d3b      	adds	r3, r7, #4
 80017a6:	4619      	mov	r1, r3
 80017a8:	4808      	ldr	r0, [pc, #32]	; (80017cc <PIRs_Iint+0x48>)
 80017aa:	f7ff fbaa 	bl	8000f02 <MCAL_GPIO_Init>

	MCAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 1); //make A0 ground
 80017ae:	2201      	movs	r2, #1
 80017b0:	2101      	movs	r1, #1
 80017b2:	4806      	ldr	r0, [pc, #24]	; (80017cc <PIRs_Iint+0x48>)
 80017b4:	f7ff fc48 	bl	8001048 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1); //make A11 ground
 80017b8:	2201      	movs	r2, #1
 80017ba:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80017be:	4803      	ldr	r0, [pc, #12]	; (80017cc <PIRs_Iint+0x48>)
 80017c0:	f7ff fc42 	bl	8001048 <MCAL_GPIO_WritePin>

}
 80017c4:	bf00      	nop
 80017c6:	3708      	adds	r7, #8
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	40010800 	.word	0x40010800

080017d0 <Store_IDs_From_Admin>:

void Store_IDs_From_Admin(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0
	LCD_sendchar(&LCD, 0x0c, COMMAND);
 80017d4:	2200      	movs	r2, #0
 80017d6:	210c      	movs	r1, #12
 80017d8:	4863      	ldr	r0, [pc, #396]	; (8001968 <Store_IDs_From_Admin+0x198>)
 80017da:	f7fe fe62 	bl	80004a2 <LCD_sendchar>
		LCD_gotoxy(&LCD, 0, 0);
 80017de:	2200      	movs	r2, #0
 80017e0:	2100      	movs	r1, #0
 80017e2:	4861      	ldr	r0, [pc, #388]	; (8001968 <Store_IDs_From_Admin+0x198>)
 80017e4:	f7fe ff4a 	bl	800067c <LCD_gotoxy>
		LCD_sendstring(&LCD,"Enter Allowed ID");
 80017e8:	4960      	ldr	r1, [pc, #384]	; (800196c <Store_IDs_From_Admin+0x19c>)
 80017ea:	485f      	ldr	r0, [pc, #380]	; (8001968 <Store_IDs_From_Admin+0x198>)
 80017ec:	f7fe ff02 	bl	80005f4 <LCD_sendstring>
		/*First ID*/
		LCD_gotoxy(&LCD, 4, 1);
 80017f0:	2201      	movs	r2, #1
 80017f2:	2104      	movs	r1, #4
 80017f4:	485c      	ldr	r0, [pc, #368]	; (8001968 <Store_IDs_From_Admin+0x198>)
 80017f6:	f7fe ff41 	bl	800067c <LCD_gotoxy>
		LCD_sendstring(&LCD,"First  ID:");
 80017fa:	495d      	ldr	r1, [pc, #372]	; (8001970 <Store_IDs_From_Admin+0x1a0>)
 80017fc:	485a      	ldr	r0, [pc, #360]	; (8001968 <Store_IDs_From_Admin+0x198>)
 80017fe:	f7fe fef9 	bl	80005f4 <LCD_sendstring>
		while(keypad_Read()=='N');
 8001802:	bf00      	nop
 8001804:	f7fe fd02 	bl	800020c <keypad_Read>
 8001808:	4603      	mov	r3, r0
 800180a:	2b4e      	cmp	r3, #78	; 0x4e
 800180c:	d0fa      	beq.n	8001804 <Store_IDs_From_Admin+0x34>
		pass[0]=keypad_Read();
 800180e:	f7fe fcfd 	bl	800020c <keypad_Read>
 8001812:	4603      	mov	r3, r0
 8001814:	b2da      	uxtb	r2, r3
 8001816:	4b57      	ldr	r3, [pc, #348]	; (8001974 <Store_IDs_From_Admin+0x1a4>)
 8001818:	701a      	strb	r2, [r3, #0]
		while(keypad_Read()!='N');
 800181a:	bf00      	nop
 800181c:	f7fe fcf6 	bl	800020c <keypad_Read>
 8001820:	4603      	mov	r3, r0
 8001822:	2b4e      	cmp	r3, #78	; 0x4e
 8001824:	d1fa      	bne.n	800181c <Store_IDs_From_Admin+0x4c>
		LCD_gotoxy(&LCD,14,1 );
 8001826:	2201      	movs	r2, #1
 8001828:	210e      	movs	r1, #14
 800182a:	484f      	ldr	r0, [pc, #316]	; (8001968 <Store_IDs_From_Admin+0x198>)
 800182c:	f7fe ff26 	bl	800067c <LCD_gotoxy>
		LCD_sendchar(&LCD, pass[0], DATA);
 8001830:	4b50      	ldr	r3, [pc, #320]	; (8001974 <Store_IDs_From_Admin+0x1a4>)
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	2201      	movs	r2, #1
 8001836:	4619      	mov	r1, r3
 8001838:	484b      	ldr	r0, [pc, #300]	; (8001968 <Store_IDs_From_Admin+0x198>)
 800183a:	f7fe fe32 	bl	80004a2 <LCD_sendchar>
		LCD_sendchar(&LCD, 0x0c, COMMAND);
 800183e:	2200      	movs	r2, #0
 8001840:	210c      	movs	r1, #12
 8001842:	4849      	ldr	r0, [pc, #292]	; (8001968 <Store_IDs_From_Admin+0x198>)
 8001844:	f7fe fe2d 	bl	80004a2 <LCD_sendchar>

		/*Second ID*/
		LCD_gotoxy(&LCD, 0, 2);
 8001848:	2202      	movs	r2, #2
 800184a:	2100      	movs	r1, #0
 800184c:	4846      	ldr	r0, [pc, #280]	; (8001968 <Store_IDs_From_Admin+0x198>)
 800184e:	f7fe ff15 	bl	800067c <LCD_gotoxy>
		LCD_sendstring(&LCD,"Second ID:");
 8001852:	4949      	ldr	r1, [pc, #292]	; (8001978 <Store_IDs_From_Admin+0x1a8>)
 8001854:	4844      	ldr	r0, [pc, #272]	; (8001968 <Store_IDs_From_Admin+0x198>)
 8001856:	f7fe fecd 	bl	80005f4 <LCD_sendstring>
		while(keypad_Read()=='N');
 800185a:	bf00      	nop
 800185c:	f7fe fcd6 	bl	800020c <keypad_Read>
 8001860:	4603      	mov	r3, r0
 8001862:	2b4e      	cmp	r3, #78	; 0x4e
 8001864:	d0fa      	beq.n	800185c <Store_IDs_From_Admin+0x8c>
		pass[1]=keypad_Read();
 8001866:	f7fe fcd1 	bl	800020c <keypad_Read>
 800186a:	4603      	mov	r3, r0
 800186c:	b2da      	uxtb	r2, r3
 800186e:	4b41      	ldr	r3, [pc, #260]	; (8001974 <Store_IDs_From_Admin+0x1a4>)
 8001870:	705a      	strb	r2, [r3, #1]
		while(keypad_Read()!='N');
 8001872:	bf00      	nop
 8001874:	f7fe fcca 	bl	800020c <keypad_Read>
 8001878:	4603      	mov	r3, r0
 800187a:	2b4e      	cmp	r3, #78	; 0x4e
 800187c:	d1fa      	bne.n	8001874 <Store_IDs_From_Admin+0xa4>
		LCD_gotoxy(&LCD, 10,2);
 800187e:	2202      	movs	r2, #2
 8001880:	210a      	movs	r1, #10
 8001882:	4839      	ldr	r0, [pc, #228]	; (8001968 <Store_IDs_From_Admin+0x198>)
 8001884:	f7fe fefa 	bl	800067c <LCD_gotoxy>
		LCD_sendchar(&LCD, pass[1], DATA);
 8001888:	4b3a      	ldr	r3, [pc, #232]	; (8001974 <Store_IDs_From_Admin+0x1a4>)
 800188a:	785b      	ldrb	r3, [r3, #1]
 800188c:	2201      	movs	r2, #1
 800188e:	4619      	mov	r1, r3
 8001890:	4835      	ldr	r0, [pc, #212]	; (8001968 <Store_IDs_From_Admin+0x198>)
 8001892:	f7fe fe06 	bl	80004a2 <LCD_sendchar>
		LCD_sendchar(&LCD, 0x0c, COMMAND);
 8001896:	2200      	movs	r2, #0
 8001898:	210c      	movs	r1, #12
 800189a:	4833      	ldr	r0, [pc, #204]	; (8001968 <Store_IDs_From_Admin+0x198>)
 800189c:	f7fe fe01 	bl	80004a2 <LCD_sendchar>

		/*Therd ID*/
		LCD_gotoxy(&LCD, 0, 3);
 80018a0:	2203      	movs	r2, #3
 80018a2:	2100      	movs	r1, #0
 80018a4:	4830      	ldr	r0, [pc, #192]	; (8001968 <Store_IDs_From_Admin+0x198>)
 80018a6:	f7fe fee9 	bl	800067c <LCD_gotoxy>
		LCD_sendstring(&LCD,"Therd  ID:");
 80018aa:	4934      	ldr	r1, [pc, #208]	; (800197c <Store_IDs_From_Admin+0x1ac>)
 80018ac:	482e      	ldr	r0, [pc, #184]	; (8001968 <Store_IDs_From_Admin+0x198>)
 80018ae:	f7fe fea1 	bl	80005f4 <LCD_sendstring>
		while(keypad_Read()=='N');
 80018b2:	bf00      	nop
 80018b4:	f7fe fcaa 	bl	800020c <keypad_Read>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b4e      	cmp	r3, #78	; 0x4e
 80018bc:	d0fa      	beq.n	80018b4 <Store_IDs_From_Admin+0xe4>
		pass[2]=keypad_Read();
 80018be:	f7fe fca5 	bl	800020c <keypad_Read>
 80018c2:	4603      	mov	r3, r0
 80018c4:	b2da      	uxtb	r2, r3
 80018c6:	4b2b      	ldr	r3, [pc, #172]	; (8001974 <Store_IDs_From_Admin+0x1a4>)
 80018c8:	709a      	strb	r2, [r3, #2]
		while(keypad_Read()!='N');
 80018ca:	bf00      	nop
 80018cc:	f7fe fc9e 	bl	800020c <keypad_Read>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b4e      	cmp	r3, #78	; 0x4e
 80018d4:	d1fa      	bne.n	80018cc <Store_IDs_From_Admin+0xfc>
		LCD_gotoxy(&LCD, 10,3 );
 80018d6:	2203      	movs	r2, #3
 80018d8:	210a      	movs	r1, #10
 80018da:	4823      	ldr	r0, [pc, #140]	; (8001968 <Store_IDs_From_Admin+0x198>)
 80018dc:	f7fe fece 	bl	800067c <LCD_gotoxy>
		LCD_sendchar(&LCD, pass[2], DATA);
 80018e0:	4b24      	ldr	r3, [pc, #144]	; (8001974 <Store_IDs_From_Admin+0x1a4>)
 80018e2:	789b      	ldrb	r3, [r3, #2]
 80018e4:	2201      	movs	r2, #1
 80018e6:	4619      	mov	r1, r3
 80018e8:	481f      	ldr	r0, [pc, #124]	; (8001968 <Store_IDs_From_Admin+0x198>)
 80018ea:	f7fe fdda 	bl	80004a2 <LCD_sendchar>
		LCD_sendchar(&LCD, 0x0c, COMMAND);
 80018ee:	2200      	movs	r2, #0
 80018f0:	210c      	movs	r1, #12
 80018f2:	481d      	ldr	r0, [pc, #116]	; (8001968 <Store_IDs_From_Admin+0x198>)
 80018f4:	f7fe fdd5 	bl	80004a2 <LCD_sendchar>

		/*Saved*/
		LCD_clearscreen(&LCD);
 80018f8:	481b      	ldr	r0, [pc, #108]	; (8001968 <Store_IDs_From_Admin+0x198>)
 80018fa:	f7fe fe9e 	bl	800063a <LCD_clearscreen>
		LCD_gotoxy(&LCD, 0, 0);
 80018fe:	2200      	movs	r2, #0
 8001900:	2100      	movs	r1, #0
 8001902:	4819      	ldr	r0, [pc, #100]	; (8001968 <Store_IDs_From_Admin+0x198>)
 8001904:	f7fe feba 	bl	800067c <LCD_gotoxy>
		LCD_sendstring(&LCD,"IDs are Saved");
 8001908:	491d      	ldr	r1, [pc, #116]	; (8001980 <Store_IDs_From_Admin+0x1b0>)
 800190a:	4817      	ldr	r0, [pc, #92]	; (8001968 <Store_IDs_From_Admin+0x198>)
 800190c:	f7fe fe72 	bl	80005f4 <LCD_sendstring>
		LCD_sendchar(&LCD, 0x0c, COMMAND);
 8001910:	2200      	movs	r2, #0
 8001912:	210c      	movs	r1, #12
 8001914:	4814      	ldr	r0, [pc, #80]	; (8001968 <Store_IDs_From_Admin+0x198>)
 8001916:	f7fe fdc4 	bl	80004a2 <LCD_sendchar>

		LCD_gotoxy(&LCD, 0, 1);
 800191a:	2201      	movs	r2, #1
 800191c:	2100      	movs	r1, #0
 800191e:	4812      	ldr	r0, [pc, #72]	; (8001968 <Store_IDs_From_Admin+0x198>)
 8001920:	f7fe feac 	bl	800067c <LCD_gotoxy>
		LCD_sendchar(&LCD, pass[0], DATA);
 8001924:	4b13      	ldr	r3, [pc, #76]	; (8001974 <Store_IDs_From_Admin+0x1a4>)
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	2201      	movs	r2, #1
 800192a:	4619      	mov	r1, r3
 800192c:	480e      	ldr	r0, [pc, #56]	; (8001968 <Store_IDs_From_Admin+0x198>)
 800192e:	f7fe fdb8 	bl	80004a2 <LCD_sendchar>
		LCD_gotoxy(&LCD, 2, 1);
 8001932:	2201      	movs	r2, #1
 8001934:	2102      	movs	r1, #2
 8001936:	480c      	ldr	r0, [pc, #48]	; (8001968 <Store_IDs_From_Admin+0x198>)
 8001938:	f7fe fea0 	bl	800067c <LCD_gotoxy>
		LCD_sendchar(&LCD, pass[1], DATA);
 800193c:	4b0d      	ldr	r3, [pc, #52]	; (8001974 <Store_IDs_From_Admin+0x1a4>)
 800193e:	785b      	ldrb	r3, [r3, #1]
 8001940:	2201      	movs	r2, #1
 8001942:	4619      	mov	r1, r3
 8001944:	4808      	ldr	r0, [pc, #32]	; (8001968 <Store_IDs_From_Admin+0x198>)
 8001946:	f7fe fdac 	bl	80004a2 <LCD_sendchar>
		LCD_gotoxy(&LCD, 4, 1);
 800194a:	2201      	movs	r2, #1
 800194c:	2104      	movs	r1, #4
 800194e:	4806      	ldr	r0, [pc, #24]	; (8001968 <Store_IDs_From_Admin+0x198>)
 8001950:	f7fe fe94 	bl	800067c <LCD_gotoxy>
		LCD_sendchar(&LCD, pass[2], DATA);
 8001954:	4b07      	ldr	r3, [pc, #28]	; (8001974 <Store_IDs_From_Admin+0x1a4>)
 8001956:	789b      	ldrb	r3, [r3, #2]
 8001958:	2201      	movs	r2, #1
 800195a:	4619      	mov	r1, r3
 800195c:	4802      	ldr	r0, [pc, #8]	; (8001968 <Store_IDs_From_Admin+0x198>)
 800195e:	f7fe fda0 	bl	80004a2 <LCD_sendchar>
}
 8001962:	bf00      	nop
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	20000004 	.word	0x20000004
 800196c:	08001aec 	.word	0x08001aec
 8001970:	08001b00 	.word	0x08001b00
 8001974:	20000048 	.word	0x20000048
 8001978:	08001b0c 	.word	0x08001b0c
 800197c:	08001b18 	.word	0x08001b18
 8001980:	08001b24 	.word	0x08001b24

08001984 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001984:	480d      	ldr	r0, [pc, #52]	; (80019bc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001986:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001988:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800198c:	480c      	ldr	r0, [pc, #48]	; (80019c0 <LoopForever+0x6>)
  ldr r1, =_edata
 800198e:	490d      	ldr	r1, [pc, #52]	; (80019c4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001990:	4a0d      	ldr	r2, [pc, #52]	; (80019c8 <LoopForever+0xe>)
  movs r3, #0
 8001992:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001994:	e002      	b.n	800199c <LoopCopyDataInit>

08001996 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001996:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001998:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800199a:	3304      	adds	r3, #4

0800199c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800199c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800199e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019a0:	d3f9      	bcc.n	8001996 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019a2:	4a0a      	ldr	r2, [pc, #40]	; (80019cc <LoopForever+0x12>)
  ldr r4, =_ebss
 80019a4:	4c0a      	ldr	r4, [pc, #40]	; (80019d0 <LoopForever+0x16>)
  movs r3, #0
 80019a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019a8:	e001      	b.n	80019ae <LoopFillZerobss>

080019aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019ac:	3204      	adds	r2, #4

080019ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019b0:	d3fb      	bcc.n	80019aa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80019b2:	f000 f811 	bl	80019d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80019b6:	f7ff fc51 	bl	800125c <main>

080019ba <LoopForever>:

LoopForever:
    b LoopForever
 80019ba:	e7fe      	b.n	80019ba <LoopForever>
  ldr   r0, =_estack
 80019bc:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 80019c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019c4:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 80019c8:	08001b54 	.word	0x08001b54
  ldr r2, =_sbss
 80019cc:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 80019d0:	200000c8 	.word	0x200000c8

080019d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80019d4:	e7fe      	b.n	80019d4 <ADC1_2_IRQHandler>
	...

080019d8 <__libc_init_array>:
 80019d8:	b570      	push	{r4, r5, r6, lr}
 80019da:	2500      	movs	r5, #0
 80019dc:	4e0c      	ldr	r6, [pc, #48]	; (8001a10 <__libc_init_array+0x38>)
 80019de:	4c0d      	ldr	r4, [pc, #52]	; (8001a14 <__libc_init_array+0x3c>)
 80019e0:	1ba4      	subs	r4, r4, r6
 80019e2:	10a4      	asrs	r4, r4, #2
 80019e4:	42a5      	cmp	r5, r4
 80019e6:	d109      	bne.n	80019fc <__libc_init_array+0x24>
 80019e8:	f000 f81a 	bl	8001a20 <_init>
 80019ec:	2500      	movs	r5, #0
 80019ee:	4e0a      	ldr	r6, [pc, #40]	; (8001a18 <__libc_init_array+0x40>)
 80019f0:	4c0a      	ldr	r4, [pc, #40]	; (8001a1c <__libc_init_array+0x44>)
 80019f2:	1ba4      	subs	r4, r4, r6
 80019f4:	10a4      	asrs	r4, r4, #2
 80019f6:	42a5      	cmp	r5, r4
 80019f8:	d105      	bne.n	8001a06 <__libc_init_array+0x2e>
 80019fa:	bd70      	pop	{r4, r5, r6, pc}
 80019fc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001a00:	4798      	blx	r3
 8001a02:	3501      	adds	r5, #1
 8001a04:	e7ee      	b.n	80019e4 <__libc_init_array+0xc>
 8001a06:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001a0a:	4798      	blx	r3
 8001a0c:	3501      	adds	r5, #1
 8001a0e:	e7f2      	b.n	80019f6 <__libc_init_array+0x1e>
 8001a10:	08001b4c 	.word	0x08001b4c
 8001a14:	08001b4c 	.word	0x08001b4c
 8001a18:	08001b4c 	.word	0x08001b4c
 8001a1c:	08001b50 	.word	0x08001b50

08001a20 <_init>:
 8001a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a22:	bf00      	nop
 8001a24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a26:	bc08      	pop	{r3}
 8001a28:	469e      	mov	lr, r3
 8001a2a:	4770      	bx	lr

08001a2c <_fini>:
 8001a2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a2e:	bf00      	nop
 8001a30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a32:	bc08      	pop	{r3}
 8001a34:	469e      	mov	lr, r3
 8001a36:	4770      	bx	lr
